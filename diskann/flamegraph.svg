<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="61656"><g><title>[[heap]] (10 samples, 0.02%)</title><rect x="0.0000%" y="757" width="0.0162%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="767.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="0.0276%" y="741" width="0.0195%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="12"/><text x="0.2776%" y="751.50"></text></g><g><title>diskann::NeighbourBuffer::insert (19 samples, 0.03%)</title><rect x="0.0600%" y="725" width="0.0308%" height="15" fill="rgb(221,193,54)" fg:x="37" fg:w="19"/><text x="0.3100%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="0.0600%" y="709" width="0.0308%" height="15" fill="rgb(248,212,6)" fg:x="37" fg:w="19"/><text x="0.3100%" y="719.50"></text></g><g><title>core::intrinsics::copy (19 samples, 0.03%)</title><rect x="0.0600%" y="693" width="0.0308%" height="15" fill="rgb(208,68,35)" fg:x="37" fg:w="19"/><text x="0.3100%" y="703.50"></text></g><g><title>diskann::greedy_search_nosearchlist (82 samples, 0.13%)</title><rect x="0.0551%" y="741" width="0.1330%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="82"/><text x="0.3051%" y="751.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (59 samples, 0.10%)</title><rect x="0.0924%" y="725" width="0.0957%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="59"/><text x="0.3424%" y="735.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (59 samples, 0.10%)</title><rect x="0.0924%" y="709" width="0.0957%" height="15" fill="rgb(228,23,34)" fg:x="57" fg:w="59"/><text x="0.3424%" y="719.50"></text></g><g><title>[[stack]] (186 samples, 0.30%)</title><rect x="0.0162%" y="757" width="0.3017%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="186"/><text x="0.2662%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (77 samples, 0.12%)</title><rect x="0.1930%" y="741" width="0.1249%" height="15" fill="rgb(220,122,19)" fg:x="119" fg:w="77"/><text x="0.4430%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.01%)</title><rect x="0.3049%" y="725" width="0.0130%" height="15" fill="rgb(250,228,42)" fg:x="188" fg:w="8"/><text x="0.5549%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (8 samples, 0.01%)</title><rect x="0.3049%" y="709" width="0.0130%" height="15" fill="rgb(240,193,28)" fg:x="188" fg:w="8"/><text x="0.5549%" y="719.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (10 samples, 0.02%)</title><rect x="0.3179%" y="741" width="0.0162%" height="15" fill="rgb(216,20,37)" fg:x="196" fg:w="10"/><text x="0.5679%" y="751.50"></text></g><g><title>[anon] (13 samples, 0.02%)</title><rect x="0.3179%" y="757" width="0.0211%" height="15" fill="rgb(206,188,39)" fg:x="196" fg:w="13"/><text x="0.5679%" y="767.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (9 samples, 0.01%)</title><rect x="0.3455%" y="741" width="0.0146%" height="15" fill="rgb(217,207,13)" fg:x="213" fg:w="9"/><text x="0.5955%" y="751.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.01%)</title><rect x="0.3601%" y="741" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="222" fg:w="8"/><text x="0.6101%" y="751.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (13 samples, 0.02%)</title><rect x="0.3779%" y="741" width="0.0211%" height="15" fill="rgb(225,20,46)" fg:x="233" fg:w="13"/><text x="0.6279%" y="751.50"></text></g><g><title>diskann::NeighbourBuffer::insert (9 samples, 0.01%)</title><rect x="0.4087%" y="725" width="0.0146%" height="15" fill="rgb(210,31,41)" fg:x="252" fg:w="9"/><text x="0.6587%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="0.4103%" y="709" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="253" fg:w="8"/><text x="0.6603%" y="719.50"></text></g><g><title>core::intrinsics::copy (8 samples, 0.01%)</title><rect x="0.4103%" y="693" width="0.0130%" height="15" fill="rgb(226,26,5)" fg:x="253" fg:w="8"/><text x="0.6603%" y="703.50"></text></g><g><title>core::core_arch::x86::f16c::_mm256_cvtph_ps (12 samples, 0.02%)</title><rect x="0.4314%" y="709" width="0.0195%" height="15" fill="rgb(249,33,26)" fg:x="266" fg:w="12"/><text x="0.6814%" y="719.50"></text></g><g><title>diskann::vector::fast_dot (27 samples, 0.04%)</title><rect x="0.4233%" y="725" width="0.0438%" height="15" fill="rgb(235,183,28)" fg:x="261" fg:w="27"/><text x="0.6733%" y="735.50"></text></g><g><title>core::core_arch::x86::sse::_mm_prefetch (10 samples, 0.02%)</title><rect x="0.4509%" y="709" width="0.0162%" height="15" fill="rgb(221,5,38)" fg:x="278" fg:w="10"/><text x="0.7009%" y="719.50"></text></g><g><title>diskann::greedy_search_nosearchlist (49 samples, 0.08%)</title><rect x="0.4087%" y="741" width="0.0795%" height="15" fill="rgb(247,18,42)" fg:x="252" fg:w="49"/><text x="0.6587%" y="751.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (13 samples, 0.02%)</title><rect x="0.4671%" y="725" width="0.0211%" height="15" fill="rgb(241,131,45)" fg:x="288" fg:w="13"/><text x="0.7171%" y="735.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (13 samples, 0.02%)</title><rect x="0.4671%" y="709" width="0.0211%" height="15" fill="rgb(249,31,29)" fg:x="288" fg:w="13"/><text x="0.7171%" y="719.50"></text></g><g><title>core::core_arch::x86::f16c::_mm256_cvtph_ps (45 samples, 0.07%)</title><rect x="0.5125%" y="709" width="0.0730%" height="15" fill="rgb(225,111,53)" fg:x="316" fg:w="45"/><text x="0.7625%" y="719.50"></text></g><g><title>diskann::robust_prune (68 samples, 0.11%)</title><rect x="0.4882%" y="741" width="0.1103%" height="15" fill="rgb(238,160,17)" fg:x="301" fg:w="68"/><text x="0.7382%" y="751.50"></text></g><g><title>diskann::vector::fast_dot (64 samples, 0.10%)</title><rect x="0.4947%" y="725" width="0.1038%" height="15" fill="rgb(214,148,48)" fg:x="305" fg:w="64"/><text x="0.7447%" y="735.50"></text></g><g><title>[unknown] (217 samples, 0.35%)</title><rect x="0.3390%" y="757" width="0.3520%" height="15" fill="rgb(232,36,49)" fg:x="209" fg:w="217"/><text x="0.5890%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (57 samples, 0.09%)</title><rect x="0.5985%" y="741" width="0.0924%" height="15" fill="rgb(209,103,24)" fg:x="369" fg:w="57"/><text x="0.8485%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.07%)</title><rect x="0.6244%" y="725" width="0.0665%" height="15" fill="rgb(229,88,8)" fg:x="385" fg:w="41"/><text x="0.8744%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.07%)</title><rect x="0.6244%" y="709" width="0.0665%" height="15" fill="rgb(213,181,19)" fg:x="385" fg:w="41"/><text x="0.8744%" y="719.50"></text></g><g><title>&lt;foldhash::seed::fast::RandomState as core::hash::BuildHasher&gt;::build_hasher (41 samples, 0.07%)</title><rect x="0.6244%" y="693" width="0.0665%" height="15" fill="rgb(254,191,54)" fg:x="385" fg:w="41"/><text x="0.8744%" y="703.50"></text></g><g><title>foldhash::fast::FoldHasher::with_seed (41 samples, 0.07%)</title><rect x="0.6244%" y="677" width="0.0665%" height="15" fill="rgb(241,83,37)" fg:x="385" fg:w="41"/><text x="0.8744%" y="687.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (22 samples, 0.04%)</title><rect x="0.7136%" y="405" width="0.0357%" height="15" fill="rgb(233,36,39)" fg:x="440" fg:w="22"/><text x="0.9636%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.04%)</title><rect x="0.7136%" y="389" width="0.0357%" height="15" fill="rgb(226,3,54)" fg:x="440" fg:w="22"/><text x="0.9636%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.04%)</title><rect x="0.7136%" y="373" width="0.0357%" height="15" fill="rgb(245,192,40)" fg:x="440" fg:w="22"/><text x="0.9636%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.04%)</title><rect x="0.7136%" y="357" width="0.0357%" height="15" fill="rgb(238,167,29)" fg:x="440" fg:w="22"/><text x="0.9636%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.04%)</title><rect x="0.7136%" y="341" width="0.0357%" height="15" fill="rgb(232,182,51)" fg:x="440" fg:w="22"/><text x="0.9636%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.04%)</title><rect x="0.7136%" y="325" width="0.0357%" height="15" fill="rgb(231,60,39)" fg:x="440" fg:w="22"/><text x="0.9636%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.04%)</title><rect x="0.7136%" y="309" width="0.0357%" height="15" fill="rgb(208,69,12)" fg:x="440" fg:w="22"/><text x="0.9636%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (22 samples, 0.04%)</title><rect x="0.7136%" y="293" width="0.0357%" height="15" fill="rgb(235,93,37)" fg:x="440" fg:w="22"/><text x="0.9636%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.04%)</title><rect x="0.7136%" y="277" width="0.0357%" height="15" fill="rgb(213,116,39)" fg:x="440" fg:w="22"/><text x="0.9636%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.04%)</title><rect x="0.7136%" y="261" width="0.0357%" height="15" fill="rgb(222,207,29)" fg:x="440" fg:w="22"/><text x="0.9636%" y="271.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.04%)</title><rect x="0.7136%" y="245" width="0.0357%" height="15" fill="rgb(206,96,30)" fg:x="440" fg:w="22"/><text x="0.9636%" y="255.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="0.7250%" y="229" width="0.0243%" height="15" fill="rgb(218,138,4)" fg:x="447" fg:w="15"/><text x="0.9750%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="0.7526%" y="341" width="0.0114%" height="15" fill="rgb(250,191,14)" fg:x="464" fg:w="7"/><text x="1.0026%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="0.7526%" y="325" width="0.0114%" height="15" fill="rgb(239,60,40)" fg:x="464" fg:w="7"/><text x="1.0026%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.01%)</title><rect x="0.7526%" y="309" width="0.0114%" height="15" fill="rgb(206,27,48)" fg:x="464" fg:w="7"/><text x="1.0026%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.03%)</title><rect x="0.7526%" y="405" width="0.0341%" height="15" fill="rgb(225,35,8)" fg:x="464" fg:w="21"/><text x="1.0026%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.03%)</title><rect x="0.7526%" y="389" width="0.0341%" height="15" fill="rgb(250,213,24)" fg:x="464" fg:w="21"/><text x="1.0026%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.03%)</title><rect x="0.7526%" y="373" width="0.0341%" height="15" fill="rgb(247,123,22)" fg:x="464" fg:w="21"/><text x="1.0026%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.03%)</title><rect x="0.7526%" y="357" width="0.0341%" height="15" fill="rgb(231,138,38)" fg:x="464" fg:w="21"/><text x="1.0026%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.02%)</title><rect x="0.7639%" y="341" width="0.0227%" height="15" fill="rgb(231,145,46)" fg:x="471" fg:w="14"/><text x="1.0139%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="0.7639%" y="325" width="0.0227%" height="15" fill="rgb(251,118,11)" fg:x="471" fg:w="14"/><text x="1.0139%" y="335.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="0.7639%" y="309" width="0.0227%" height="15" fill="rgb(217,147,25)" fg:x="471" fg:w="14"/><text x="1.0139%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (8 samples, 0.01%)</title><rect x="0.7882%" y="405" width="0.0130%" height="15" fill="rgb(247,81,37)" fg:x="486" fg:w="8"/><text x="1.0382%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (8 samples, 0.01%)</title><rect x="0.7882%" y="389" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="486" fg:w="8"/><text x="1.0382%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.7882%" y="373" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="486" fg:w="8"/><text x="1.0382%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.01%)</title><rect x="0.7882%" y="357" width="0.0130%" height="15" fill="rgb(248,47,43)" fg:x="486" fg:w="8"/><text x="1.0382%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.01%)</title><rect x="0.7882%" y="341" width="0.0130%" height="15" fill="rgb(221,10,30)" fg:x="486" fg:w="8"/><text x="1.0382%" y="351.50"></text></g><g><title>cfree (7 samples, 0.01%)</title><rect x="0.7899%" y="325" width="0.0114%" height="15" fill="rgb(210,229,1)" fg:x="487" fg:w="7"/><text x="1.0399%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;alloc::vec::Vec&lt;u32&gt;&gt;&gt; (9 samples, 0.01%)</title><rect x="0.8077%" y="405" width="0.0146%" height="15" fill="rgb(222,148,37)" fg:x="498" fg:w="9"/><text x="1.0577%" y="415.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="0.8077%" y="389" width="0.0146%" height="15" fill="rgb(234,67,33)" fg:x="498" fg:w="9"/><text x="1.0577%" y="399.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write_unlock (8 samples, 0.01%)</title><rect x="0.8093%" y="373" width="0.0130%" height="15" fill="rgb(247,98,35)" fg:x="499" fg:w="8"/><text x="1.0593%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (8 samples, 0.01%)</title><rect x="0.8093%" y="357" width="0.0130%" height="15" fill="rgb(247,138,52)" fg:x="499" fg:w="8"/><text x="1.0593%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.01%)</title><rect x="0.8093%" y="341" width="0.0130%" height="15" fill="rgb(213,79,30)" fg:x="499" fg:w="8"/><text x="1.0593%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (66 samples, 0.11%)</title><rect x="0.8223%" y="405" width="0.1070%" height="15" fill="rgb(246,177,23)" fg:x="507" fg:w="66"/><text x="1.0723%" y="415.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (66 samples, 0.11%)</title><rect x="0.8223%" y="389" width="0.1070%" height="15" fill="rgb(230,62,27)" fg:x="507" fg:w="66"/><text x="1.0723%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (66 samples, 0.11%)</title><rect x="0.8223%" y="373" width="0.1070%" height="15" fill="rgb(216,154,8)" fg:x="507" fg:w="66"/><text x="1.0723%" y="383.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (56 samples, 0.09%)</title><rect x="0.8385%" y="357" width="0.0908%" height="15" fill="rgb(244,35,45)" fg:x="517" fg:w="56"/><text x="1.0885%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (56 samples, 0.09%)</title><rect x="0.8385%" y="341" width="0.0908%" height="15" fill="rgb(251,115,12)" fg:x="517" fg:w="56"/><text x="1.0885%" y="351.50"></text></g><g><title>diskann::IndexGraph::out_neighbours_mut (56 samples, 0.09%)</title><rect x="0.9326%" y="405" width="0.0908%" height="15" fill="rgb(240,54,50)" fg:x="575" fg:w="56"/><text x="1.1826%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::write (56 samples, 0.09%)</title><rect x="0.9326%" y="389" width="0.0908%" height="15" fill="rgb(233,84,52)" fg:x="575" fg:w="56"/><text x="1.1826%" y="399.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write (53 samples, 0.09%)</title><rect x="0.9375%" y="373" width="0.0860%" height="15" fill="rgb(207,117,47)" fg:x="578" fg:w="53"/><text x="1.1875%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (52 samples, 0.08%)</title><rect x="0.9391%" y="357" width="0.0843%" height="15" fill="rgb(249,43,39)" fg:x="579" fg:w="52"/><text x="1.1891%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (52 samples, 0.08%)</title><rect x="0.9391%" y="341" width="0.0843%" height="15" fill="rgb(209,38,44)" fg:x="579" fg:w="52"/><text x="1.1891%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="1.6673%" y="389" width="0.0178%" height="15" fill="rgb(236,212,23)" fg:x="1028" fg:w="11"/><text x="1.9173%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="1.6673%" y="373" width="0.0178%" height="15" fill="rgb(242,79,21)" fg:x="1028" fg:w="11"/><text x="1.9173%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.02%)</title><rect x="1.6673%" y="357" width="0.0178%" height="15" fill="rgb(211,96,35)" fg:x="1028" fg:w="11"/><text x="1.9173%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (23 samples, 0.04%)</title><rect x="1.7500%" y="325" width="0.0373%" height="15" fill="rgb(253,215,40)" fg:x="1079" fg:w="23"/><text x="2.0000%" y="335.50"></text></g><g><title>&lt;diskann::vector::VectorList as core::ops::index::Index&lt;usize&gt;&gt;::index (62 samples, 0.10%)</title><rect x="1.6884%" y="389" width="0.1006%" height="15" fill="rgb(211,81,21)" fg:x="1041" fg:w="62"/><text x="1.9384%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25 samples, 0.04%)</title><rect x="1.7484%" y="373" width="0.0405%" height="15" fill="rgb(208,190,38)" fg:x="1078" fg:w="25"/><text x="1.9984%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (25 samples, 0.04%)</title><rect x="1.7484%" y="357" width="0.0405%" height="15" fill="rgb(235,213,38)" fg:x="1078" fg:w="25"/><text x="1.9984%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (25 samples, 0.04%)</title><rect x="1.7484%" y="341" width="0.0405%" height="15" fill="rgb(237,122,38)" fg:x="1078" fg:w="25"/><text x="1.9984%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (16 samples, 0.03%)</title><rect x="1.9301%" y="373" width="0.0260%" height="15" fill="rgb(244,218,35)" fg:x="1190" fg:w="16"/><text x="2.1801%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (115 samples, 0.19%)</title><rect x="1.7922%" y="389" width="0.1865%" height="15" fill="rgb(240,68,47)" fg:x="1105" fg:w="115"/><text x="2.0422%" y="399.50"></text></g><g><title>core::ptr::write (14 samples, 0.02%)</title><rect x="1.9560%" y="373" width="0.0227%" height="15" fill="rgb(210,16,53)" fg:x="1206" fg:w="14"/><text x="2.2060%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;u32&gt;&gt;&gt; (26 samples, 0.04%)</title><rect x="1.9836%" y="389" width="0.0422%" height="15" fill="rgb(235,124,12)" fg:x="1223" fg:w="26"/><text x="2.2336%" y="399.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.04%)</title><rect x="1.9836%" y="373" width="0.0422%" height="15" fill="rgb(224,169,11)" fg:x="1223" fg:w="26"/><text x="2.2336%" y="383.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (26 samples, 0.04%)</title><rect x="1.9836%" y="357" width="0.0422%" height="15" fill="rgb(250,166,2)" fg:x="1223" fg:w="26"/><text x="2.2336%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (26 samples, 0.04%)</title><rect x="1.9836%" y="341" width="0.0422%" height="15" fill="rgb(242,216,29)" fg:x="1223" fg:w="26"/><text x="2.2336%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (26 samples, 0.04%)</title><rect x="1.9836%" y="325" width="0.0422%" height="15" fill="rgb(230,116,27)" fg:x="1223" fg:w="26"/><text x="2.2336%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (18 samples, 0.03%)</title><rect x="2.0274%" y="341" width="0.0292%" height="15" fill="rgb(228,99,48)" fg:x="1250" fg:w="18"/><text x="2.2774%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (18 samples, 0.03%)</title><rect x="2.0274%" y="325" width="0.0292%" height="15" fill="rgb(253,11,6)" fg:x="1250" fg:w="18"/><text x="2.2774%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (208 samples, 0.34%)</title><rect x="2.0566%" y="341" width="0.3374%" height="15" fill="rgb(247,143,39)" fg:x="1268" fg:w="208"/><text x="2.3066%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (208 samples, 0.34%)</title><rect x="2.0566%" y="325" width="0.3374%" height="15" fill="rgb(236,97,10)" fg:x="1268" fg:w="208"/><text x="2.3066%" y="335.50"></text></g><g><title>diskann::IndexGraph::out_neighbours (231 samples, 0.37%)</title><rect x="2.0258%" y="389" width="0.3747%" height="15" fill="rgb(233,208,19)" fg:x="1249" fg:w="231"/><text x="2.2758%" y="399.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (231 samples, 0.37%)</title><rect x="2.0258%" y="373" width="0.3747%" height="15" fill="rgb(216,164,2)" fg:x="1249" fg:w="231"/><text x="2.2758%" y="383.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (230 samples, 0.37%)</title><rect x="2.0274%" y="357" width="0.3730%" height="15" fill="rgb(220,129,5)" fg:x="1250" fg:w="230"/><text x="2.2774%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12 samples, 0.02%)</title><rect x="2.4896%" y="373" width="0.0195%" height="15" fill="rgb(242,17,10)" fg:x="1535" fg:w="12"/><text x="2.7396%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.02%)</title><rect x="2.4912%" y="357" width="0.0178%" height="15" fill="rgb(242,107,0)" fg:x="1536" fg:w="11"/><text x="2.7412%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (11 samples, 0.02%)</title><rect x="2.4912%" y="341" width="0.0178%" height="15" fill="rgb(251,28,31)" fg:x="1536" fg:w="11"/><text x="2.7412%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.01%)</title><rect x="2.5448%" y="357" width="0.0114%" height="15" fill="rgb(233,223,10)" fg:x="1569" fg:w="7"/><text x="2.7948%" y="367.50"></text></g><g><title>core::intrinsics::copy (265 samples, 0.43%)</title><rect x="2.5594%" y="357" width="0.4298%" height="15" fill="rgb(215,21,27)" fg:x="1578" fg:w="265"/><text x="2.8094%" y="367.50"></text></g><g><title>[libc.so.6] (257 samples, 0.42%)</title><rect x="2.5723%" y="341" width="0.4168%" height="15" fill="rgb(232,23,21)" fg:x="1586" fg:w="257"/><text x="2.8223%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (297 samples, 0.48%)</title><rect x="2.5091%" y="373" width="0.4817%" height="15" fill="rgb(244,5,23)" fg:x="1547" fg:w="297"/><text x="2.7591%" y="383.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (115 samples, 0.19%)</title><rect x="3.1708%" y="357" width="0.1865%" height="15" fill="rgb(226,81,46)" fg:x="1955" fg:w="115"/><text x="3.4208%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (237 samples, 0.38%)</title><rect x="3.0005%" y="373" width="0.3844%" height="15" fill="rgb(247,70,30)" fg:x="1850" fg:w="237"/><text x="3.2505%" y="383.50"></text></g><g><title>diskann::NeighbourBuffer::insert::_{{closure}} (16 samples, 0.03%)</title><rect x="3.3590%" y="357" width="0.0260%" height="15" fill="rgb(212,68,19)" fg:x="2071" fg:w="16"/><text x="3.6090%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (16 samples, 0.03%)</title><rect x="3.3590%" y="341" width="0.0260%" height="15" fill="rgb(240,187,13)" fg:x="2071" fg:w="16"/><text x="3.6090%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (9 samples, 0.01%)</title><rect x="3.3849%" y="373" width="0.0146%" height="15" fill="rgb(223,113,26)" fg:x="2087" fg:w="9"/><text x="3.6349%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (9 samples, 0.01%)</title><rect x="3.3849%" y="357" width="0.0146%" height="15" fill="rgb(206,192,2)" fg:x="2087" fg:w="9"/><text x="3.6349%" y="367.50"></text></g><g><title>diskann::NeighbourBuffer::insert (619 samples, 1.00%)</title><rect x="2.4004%" y="389" width="1.0040%" height="15" fill="rgb(241,108,4)" fg:x="1480" fg:w="619"/><text x="2.6504%" y="399.50"></text></g><g><title>diskann::NeighbourBuffer::next_unvisited (13 samples, 0.02%)</title><rect x="3.4044%" y="389" width="0.0211%" height="15" fill="rgb(247,173,49)" fg:x="2099" fg:w="13"/><text x="3.6544%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (10 samples, 0.02%)</title><rect x="4.8544%" y="373" width="0.0162%" height="15" fill="rgb(224,114,35)" fg:x="2993" fg:w="10"/><text x="5.1044%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (9 samples, 0.01%)</title><rect x="4.8560%" y="357" width="0.0146%" height="15" fill="rgb(245,159,27)" fg:x="2994" fg:w="9"/><text x="5.1060%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (9 samples, 0.01%)</title><rect x="4.8560%" y="341" width="0.0146%" height="15" fill="rgb(245,172,44)" fg:x="2994" fg:w="9"/><text x="5.1060%" y="351.50"></text></g><g><title>hrtimer_interrupt (8 samples, 0.01%)</title><rect x="4.8576%" y="325" width="0.0130%" height="15" fill="rgb(236,23,11)" fg:x="2995" fg:w="8"/><text x="5.1076%" y="335.50"></text></g><g><title>__hrtimer_run_queues (7 samples, 0.01%)</title><rect x="4.8592%" y="309" width="0.0114%" height="15" fill="rgb(205,117,38)" fg:x="2996" fg:w="7"/><text x="5.1092%" y="319.50"></text></g><g><title>tick_nohz_handler (7 samples, 0.01%)</title><rect x="4.8592%" y="293" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="2996" fg:w="7"/><text x="5.1092%" y="303.50"></text></g><g><title>update_process_times (7 samples, 0.01%)</title><rect x="4.8592%" y="277" width="0.0114%" height="15" fill="rgb(244,70,9)" fg:x="2996" fg:w="7"/><text x="5.1092%" y="287.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_add_ps (36 samples, 0.06%)</title><rect x="4.8706%" y="373" width="0.0584%" height="15" fill="rgb(217,125,39)" fg:x="3003" fg:w="36"/><text x="5.1206%" y="383.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_extractf128_ps (36 samples, 0.06%)</title><rect x="4.9290%" y="373" width="0.0584%" height="15" fill="rgb(235,36,10)" fg:x="3039" fg:w="36"/><text x="5.1790%" y="383.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_hadd_ps (47 samples, 0.08%)</title><rect x="4.9873%" y="373" width="0.0762%" height="15" fill="rgb(251,123,47)" fg:x="3075" fg:w="47"/><text x="5.2373%" y="383.50"></text></g><g><title>perf_event_task_tick (7 samples, 0.01%)</title><rect x="9.6876%" y="229" width="0.0114%" height="15" fill="rgb(221,13,13)" fg:x="5973" fg:w="7"/><text x="9.9376%" y="239.50"></text></g><g><title>update_process_times (27 samples, 0.04%)</title><rect x="9.6730%" y="261" width="0.0438%" height="15" fill="rgb(238,131,9)" fg:x="5964" fg:w="27"/><text x="9.9230%" y="271.50"></text></g><g><title>sched_tick (19 samples, 0.03%)</title><rect x="9.6860%" y="245" width="0.0308%" height="15" fill="rgb(211,50,8)" fg:x="5972" fg:w="19"/><text x="9.9360%" y="255.50"></text></g><g><title>task_tick_fair (9 samples, 0.01%)</title><rect x="9.7022%" y="229" width="0.0146%" height="15" fill="rgb(245,182,24)" fg:x="5982" fg:w="9"/><text x="9.9522%" y="239.50"></text></g><g><title>tick_nohz_handler (36 samples, 0.06%)</title><rect x="9.6698%" y="277" width="0.0584%" height="15" fill="rgb(242,14,37)" fg:x="5962" fg:w="36"/><text x="9.9198%" y="287.50"></text></g><g><title>update_wall_time (7 samples, 0.01%)</title><rect x="9.7168%" y="261" width="0.0114%" height="15" fill="rgb(246,228,12)" fg:x="5991" fg:w="7"/><text x="9.9668%" y="271.50"></text></g><g><title>timekeeping_advance (7 samples, 0.01%)</title><rect x="9.7168%" y="245" width="0.0114%" height="15" fill="rgb(213,55,15)" fg:x="5991" fg:w="7"/><text x="9.9668%" y="255.50"></text></g><g><title>__hrtimer_run_queues (40 samples, 0.06%)</title><rect x="9.6665%" y="293" width="0.0649%" height="15" fill="rgb(209,9,3)" fg:x="5960" fg:w="40"/><text x="9.9165%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (42 samples, 0.07%)</title><rect x="9.6649%" y="325" width="0.0681%" height="15" fill="rgb(230,59,30)" fg:x="5959" fg:w="42"/><text x="9.9149%" y="335.50"></text></g><g><title>hrtimer_interrupt (41 samples, 0.07%)</title><rect x="9.6665%" y="309" width="0.0665%" height="15" fill="rgb(209,121,21)" fg:x="5960" fg:w="41"/><text x="9.9165%" y="319.50"></text></g><g><title>irq_exit_rcu (7 samples, 0.01%)</title><rect x="9.7330%" y="325" width="0.0114%" height="15" fill="rgb(220,109,13)" fg:x="6001" fg:w="7"/><text x="9.9830%" y="335.50"></text></g><g><title>handle_softirqs (7 samples, 0.01%)</title><rect x="9.7330%" y="309" width="0.0114%" height="15" fill="rgb(232,18,1)" fg:x="6001" fg:w="7"/><text x="9.9830%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (57 samples, 0.09%)</title><rect x="9.6552%" y="357" width="0.0924%" height="15" fill="rgb(215,41,42)" fg:x="5953" fg:w="57"/><text x="9.9052%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (51 samples, 0.08%)</title><rect x="9.6649%" y="341" width="0.0827%" height="15" fill="rgb(224,123,36)" fg:x="5959" fg:w="51"/><text x="9.9149%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (12 samples, 0.02%)</title><rect x="9.7493%" y="277" width="0.0195%" height="15" fill="rgb(240,125,3)" fg:x="6011" fg:w="12"/><text x="9.9993%" y="287.50"></text></g><g><title>__intel_pmu_enable_all.isra.0 (12 samples, 0.02%)</title><rect x="9.7493%" y="261" width="0.0195%" height="15" fill="rgb(205,98,50)" fg:x="6011" fg:w="12"/><text x="9.9993%" y="271.50"></text></g><g><title>native_write_msr (12 samples, 0.02%)</title><rect x="9.7493%" y="245" width="0.0195%" height="15" fill="rgb(205,185,37)" fg:x="6011" fg:w="12"/><text x="9.9993%" y="255.50"></text></g><g><title>core::core_arch::x86::f16c::_mm256_cvtph_ps (2,902 samples, 4.71%)</title><rect x="5.0636%" y="373" width="4.7068%" height="15" fill="rgb(238,207,15)" fg:x="3122" fg:w="2902"/><text x="5.3136%" y="383.50">core:..</text></g><g><title>asm_sysvec_reschedule_ipi (14 samples, 0.02%)</title><rect x="9.7476%" y="357" width="0.0227%" height="15" fill="rgb(213,199,42)" fg:x="6010" fg:w="14"/><text x="9.9976%" y="367.50"></text></g><g><title>irqentry_exit_to_user_mode (14 samples, 0.02%)</title><rect x="9.7476%" y="341" width="0.0227%" height="15" fill="rgb(235,201,11)" fg:x="6010" fg:w="14"/><text x="9.9976%" y="351.50"></text></g><g><title>schedule (13 samples, 0.02%)</title><rect x="9.7493%" y="325" width="0.0211%" height="15" fill="rgb(207,46,11)" fg:x="6011" fg:w="13"/><text x="9.9993%" y="335.50"></text></g><g><title>__schedule (13 samples, 0.02%)</title><rect x="9.7493%" y="309" width="0.0211%" height="15" fill="rgb(241,35,35)" fg:x="6011" fg:w="13"/><text x="9.9993%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (13 samples, 0.02%)</title><rect x="9.7493%" y="293" width="0.0211%" height="15" fill="rgb(243,32,47)" fg:x="6011" fg:w="13"/><text x="9.9993%" y="303.50"></text></g><g><title>update_process_times (9 samples, 0.01%)</title><rect x="11.0143%" y="261" width="0.0146%" height="15" fill="rgb(247,202,23)" fg:x="6791" fg:w="9"/><text x="11.2643%" y="271.50"></text></g><g><title>sched_tick (9 samples, 0.01%)</title><rect x="11.0143%" y="245" width="0.0146%" height="15" fill="rgb(219,102,11)" fg:x="6791" fg:w="9"/><text x="11.2643%" y="255.50"></text></g><g><title>__sysvec_apic_timer_interrupt (11 samples, 0.02%)</title><rect x="11.0127%" y="325" width="0.0178%" height="15" fill="rgb(243,110,44)" fg:x="6790" fg:w="11"/><text x="11.2627%" y="335.50"></text></g><g><title>hrtimer_interrupt (11 samples, 0.02%)</title><rect x="11.0127%" y="309" width="0.0178%" height="15" fill="rgb(222,74,54)" fg:x="6790" fg:w="11"/><text x="11.2627%" y="319.50"></text></g><g><title>__hrtimer_run_queues (11 samples, 0.02%)</title><rect x="11.0127%" y="293" width="0.0178%" height="15" fill="rgb(216,99,12)" fg:x="6790" fg:w="11"/><text x="11.2627%" y="303.50"></text></g><g><title>tick_nohz_handler (11 samples, 0.02%)</title><rect x="11.0127%" y="277" width="0.0178%" height="15" fill="rgb(226,22,26)" fg:x="6790" fg:w="11"/><text x="11.2627%" y="287.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_ps (780 samples, 1.27%)</title><rect x="9.7703%" y="373" width="1.2651%" height="15" fill="rgb(217,163,10)" fg:x="6024" fg:w="780"/><text x="10.0203%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (14 samples, 0.02%)</title><rect x="11.0127%" y="357" width="0.0227%" height="15" fill="rgb(213,25,53)" fg:x="6790" fg:w="14"/><text x="11.2627%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (14 samples, 0.02%)</title><rect x="11.0127%" y="341" width="0.0227%" height="15" fill="rgb(252,105,26)" fg:x="6790" fg:w="14"/><text x="11.2627%" y="351.50"></text></g><g><title>core::core_arch::x86::sse::_mm_add_ps (48 samples, 0.08%)</title><rect x="11.0354%" y="373" width="0.0779%" height="15" fill="rgb(220,39,43)" fg:x="6804" fg:w="48"/><text x="11.2854%" y="383.50"></text></g><g><title>diskann::vector::fast_dot (8,772 samples, 14.23%)</title><rect x="3.4255%" y="389" width="14.2273%" height="15" fill="rgb(229,68,48)" fg:x="2112" fg:w="8772"/><text x="3.6755%" y="399.50">diskann::vector::fast_..</text></g><g><title>core::core_arch::x86::sse::_mm_prefetch (4,032 samples, 6.54%)</title><rect x="11.1133%" y="373" width="6.5395%" height="15" fill="rgb(252,8,32)" fg:x="6852" fg:w="4032"/><text x="11.3633%" y="383.50">core::cor..</text></g><g><title>diskann::vector::fast_dot_noprefetch (19 samples, 0.03%)</title><rect x="17.6528%" y="389" width="0.0308%" height="15" fill="rgb(223,20,43)" fg:x="10884" fg:w="19"/><text x="17.9028%" y="399.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::finish (48 samples, 0.08%)</title><rect x="17.6998%" y="309" width="0.0779%" height="15" fill="rgb(229,81,49)" fg:x="10913" fg:w="48"/><text x="17.9498%" y="319.50"></text></g><g><title>foldhash::folded_multiply (12 samples, 0.02%)</title><rect x="17.7582%" y="293" width="0.0195%" height="15" fill="rgb(236,28,36)" fg:x="10949" fg:w="12"/><text x="18.0082%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (49 samples, 0.08%)</title><rect x="17.6998%" y="341" width="0.0795%" height="15" fill="rgb(249,185,26)" fg:x="10913" fg:w="49"/><text x="17.9498%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (49 samples, 0.08%)</title><rect x="17.6998%" y="325" width="0.0795%" height="15" fill="rgb(249,174,33)" fg:x="10913" fg:w="49"/><text x="17.9498%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (30 samples, 0.05%)</title><rect x="17.7825%" y="325" width="0.0487%" height="15" fill="rgb(233,201,37)" fg:x="10964" fg:w="30"/><text x="18.0325%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (7 samples, 0.01%)</title><rect x="18.4167%" y="277" width="0.0114%" height="15" fill="rgb(221,78,26)" fg:x="11355" fg:w="7"/><text x="18.6667%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (162 samples, 0.26%)</title><rect x="18.2010%" y="293" width="0.2627%" height="15" fill="rgb(250,127,30)" fg:x="11222" fg:w="162"/><text x="18.4510%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (22 samples, 0.04%)</title><rect x="18.4281%" y="277" width="0.0357%" height="15" fill="rgb(230,49,44)" fg:x="11362" fg:w="22"/><text x="18.6781%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (22 samples, 0.04%)</title><rect x="18.4281%" y="261" width="0.0357%" height="15" fill="rgb(229,67,23)" fg:x="11362" fg:w="22"/><text x="18.6781%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (165 samples, 0.27%)</title><rect x="18.2010%" y="309" width="0.2676%" height="15" fill="rgb(249,83,47)" fg:x="11222" fg:w="165"/><text x="18.4510%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (32 samples, 0.05%)</title><rect x="18.4686%" y="309" width="0.0519%" height="15" fill="rgb(215,43,3)" fg:x="11387" fg:w="32"/><text x="18.7186%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (32 samples, 0.05%)</title><rect x="18.4686%" y="293" width="0.0519%" height="15" fill="rgb(238,154,13)" fg:x="11387" fg:w="32"/><text x="18.7186%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (23 samples, 0.04%)</title><rect x="18.5205%" y="309" width="0.0373%" height="15" fill="rgb(219,56,2)" fg:x="11419" fg:w="23"/><text x="18.7705%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (23 samples, 0.04%)</title><rect x="18.5205%" y="293" width="0.0373%" height="15" fill="rgb(233,0,4)" fg:x="11419" fg:w="23"/><text x="18.7705%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (23 samples, 0.04%)</title><rect x="18.5205%" y="277" width="0.0373%" height="15" fill="rgb(235,30,7)" fg:x="11419" fg:w="23"/><text x="18.7705%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.04%)</title><rect x="18.5205%" y="261" width="0.0373%" height="15" fill="rgb(250,79,13)" fg:x="11419" fg:w="23"/><text x="18.7705%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (18 samples, 0.03%)</title><rect x="18.5773%" y="293" width="0.0292%" height="15" fill="rgb(211,146,34)" fg:x="11454" fg:w="18"/><text x="18.8273%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (44 samples, 0.07%)</title><rect x="18.5578%" y="309" width="0.0714%" height="15" fill="rgb(228,22,38)" fg:x="11442" fg:w="44"/><text x="18.8078%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (14 samples, 0.02%)</title><rect x="18.6065%" y="293" width="0.0227%" height="15" fill="rgb(235,168,5)" fg:x="11472" fg:w="14"/><text x="18.8565%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.02%)</title><rect x="18.6065%" y="277" width="0.0227%" height="15" fill="rgb(221,155,16)" fg:x="11472" fg:w="14"/><text x="18.8565%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (56 samples, 0.09%)</title><rect x="18.6292%" y="309" width="0.0908%" height="15" fill="rgb(215,215,53)" fg:x="11486" fg:w="56"/><text x="18.8792%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (27 samples, 0.04%)</title><rect x="18.6762%" y="293" width="0.0438%" height="15" fill="rgb(223,4,10)" fg:x="11515" fg:w="27"/><text x="18.9262%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (12 samples, 0.02%)</title><rect x="18.7200%" y="309" width="0.0195%" height="15" fill="rgb(234,103,6)" fg:x="11542" fg:w="12"/><text x="18.9700%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (50 samples, 0.08%)</title><rect x="18.7395%" y="309" width="0.0811%" height="15" fill="rgb(227,97,0)" fg:x="11554" fg:w="50"/><text x="18.9895%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (122 samples, 0.20%)</title><rect x="18.8206%" y="309" width="0.1979%" height="15" fill="rgb(234,150,53)" fg:x="11604" fg:w="122"/><text x="19.0706%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (122 samples, 0.20%)</title><rect x="18.8206%" y="293" width="0.1979%" height="15" fill="rgb(228,201,54)" fg:x="11604" fg:w="122"/><text x="19.0706%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (122 samples, 0.20%)</title><rect x="18.8206%" y="277" width="0.1979%" height="15" fill="rgb(222,22,37)" fg:x="11604" fg:w="122"/><text x="19.0706%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (77 samples, 0.12%)</title><rect x="19.0184%" y="309" width="0.1249%" height="15" fill="rgb(237,53,32)" fg:x="11726" fg:w="77"/><text x="19.2684%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (77 samples, 0.12%)</title><rect x="19.0184%" y="293" width="0.1249%" height="15" fill="rgb(233,25,53)" fg:x="11726" fg:w="77"/><text x="19.2684%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (842 samples, 1.37%)</title><rect x="17.7793%" y="341" width="1.3656%" height="15" fill="rgb(210,40,34)" fg:x="10962" fg:w="842"/><text x="18.0293%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (810 samples, 1.31%)</title><rect x="17.8312%" y="325" width="1.3137%" height="15" fill="rgb(241,220,44)" fg:x="10994" fg:w="810"/><text x="18.0812%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (37 samples, 0.06%)</title><rect x="19.1449%" y="309" width="0.0600%" height="15" fill="rgb(235,28,35)" fg:x="11804" fg:w="37"/><text x="19.3949%" y="319.50"></text></g><g><title>core::ptr::write (37 samples, 0.06%)</title><rect x="19.1449%" y="293" width="0.0600%" height="15" fill="rgb(210,56,17)" fg:x="11804" fg:w="37"/><text x="19.3949%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (38 samples, 0.06%)</title><rect x="19.1449%" y="325" width="0.0616%" height="15" fill="rgb(224,130,29)" fg:x="11804" fg:w="38"/><text x="19.3949%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (18 samples, 0.03%)</title><rect x="19.2066%" y="325" width="0.0292%" height="15" fill="rgb(235,212,8)" fg:x="11842" fg:w="18"/><text x="19.4566%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (18 samples, 0.03%)</title><rect x="19.2066%" y="309" width="0.0292%" height="15" fill="rgb(223,33,50)" fg:x="11842" fg:w="18"/><text x="19.4566%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (18 samples, 0.03%)</title><rect x="19.2066%" y="293" width="0.0292%" height="15" fill="rgb(219,149,13)" fg:x="11842" fg:w="18"/><text x="19.4566%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (18 samples, 0.03%)</title><rect x="19.2066%" y="277" width="0.0292%" height="15" fill="rgb(250,156,29)" fg:x="11842" fg:w="18"/><text x="19.4566%" y="287.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (7 samples, 0.01%)</title><rect x="19.2974%" y="309" width="0.0114%" height="15" fill="rgb(216,193,19)" fg:x="11898" fg:w="7"/><text x="19.5474%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (23 samples, 0.04%)</title><rect x="19.3087%" y="309" width="0.0373%" height="15" fill="rgb(216,135,14)" fg:x="11905" fg:w="23"/><text x="19.5587%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (23 samples, 0.04%)</title><rect x="19.3087%" y="293" width="0.0373%" height="15" fill="rgb(241,47,5)" fg:x="11905" fg:w="23"/><text x="19.5587%" y="303.50"></text></g><g><title>diskann::greedy_search_nosearchlist (11,299 samples, 18.33%)</title><rect x="1.0234%" y="405" width="18.3259%" height="15" fill="rgb(233,42,35)" fg:x="631" fg:w="11299"/><text x="1.2734%" y="415.50">diskann::greedy_search_nosear..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1,021 samples, 1.66%)</title><rect x="17.6933%" y="389" width="1.6560%" height="15" fill="rgb(231,13,6)" fg:x="10909" fg:w="1021"/><text x="17.9433%" y="399.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1,021 samples, 1.66%)</title><rect x="17.6933%" y="373" width="1.6560%" height="15" fill="rgb(207,181,40)" fg:x="10909" fg:w="1021"/><text x="17.9433%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,019 samples, 1.65%)</title><rect x="17.6966%" y="357" width="1.6527%" height="15" fill="rgb(254,173,49)" fg:x="10911" fg:w="1019"/><text x="17.9466%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (126 samples, 0.20%)</title><rect x="19.1449%" y="341" width="0.2044%" height="15" fill="rgb(221,1,38)" fg:x="11804" fg:w="126"/><text x="19.3949%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (70 samples, 0.11%)</title><rect x="19.2358%" y="325" width="0.1135%" height="15" fill="rgb(206,124,46)" fg:x="11860" fg:w="70"/><text x="19.4858%" y="335.50"></text></g><g><title>&lt;diskann::vector::VectorList as core::ops::index::Index&lt;usize&gt;&gt;::index (9 samples, 0.01%)</title><rect x="19.3769%" y="389" width="0.0146%" height="15" fill="rgb(249,21,11)" fg:x="11947" fg:w="9"/><text x="19.6269%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.01%)</title><rect x="19.3915%" y="389" width="0.0130%" height="15" fill="rgb(222,201,40)" fg:x="11956" fg:w="8"/><text x="19.6415%" y="399.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_extractf128_ps (11 samples, 0.02%)</title><rect x="19.6964%" y="373" width="0.0178%" height="15" fill="rgb(235,61,29)" fg:x="12144" fg:w="11"/><text x="19.9464%" y="383.50"></text></g><g><title>core::core_arch::x86::f16c::_mm256_cvtph_ps (397 samples, 0.64%)</title><rect x="19.7223%" y="373" width="0.6439%" height="15" fill="rgb(219,207,3)" fg:x="12160" fg:w="397"/><text x="19.9723%" y="383.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_ps (127 samples, 0.21%)</title><rect x="20.3662%" y="373" width="0.2060%" height="15" fill="rgb(222,56,46)" fg:x="12557" fg:w="127"/><text x="20.6162%" y="383.50"></text></g><g><title>core::core_arch::x86::sse::_mm_add_ps (10 samples, 0.02%)</title><rect x="20.5722%" y="373" width="0.0162%" height="15" fill="rgb(239,76,54)" fg:x="12684" fg:w="10"/><text x="20.8222%" y="383.50"></text></g><g><title>diskann::merge_existing_neighbours (1,074 samples, 1.74%)</title><rect x="19.3493%" y="405" width="1.7419%" height="15" fill="rgb(231,124,27)" fg:x="11930" fg:w="1074"/><text x="19.5993%" y="415.50"></text></g><g><title>diskann::vector::fast_dot (1,040 samples, 1.69%)</title><rect x="19.4044%" y="389" width="1.6868%" height="15" fill="rgb(249,195,6)" fg:x="11964" fg:w="1040"/><text x="19.6544%" y="399.50"></text></g><g><title>core::core_arch::x86::sse::_mm_prefetch (310 samples, 0.50%)</title><rect x="20.5884%" y="373" width="0.5028%" height="15" fill="rgb(237,174,47)" fg:x="12694" fg:w="310"/><text x="20.8384%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (139 samples, 0.23%)</title><rect x="24.2426%" y="357" width="0.2254%" height="15" fill="rgb(206,201,31)" fg:x="14947" fg:w="139"/><text x="24.4926%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (139 samples, 0.23%)</title><rect x="24.2426%" y="341" width="0.2254%" height="15" fill="rgb(231,57,52)" fg:x="14947" fg:w="139"/><text x="24.4926%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (243 samples, 0.39%)</title><rect x="24.0755%" y="373" width="0.3941%" height="15" fill="rgb(248,177,22)" fg:x="14844" fg:w="243"/><text x="24.3255%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (618 samples, 1.00%)</title><rect x="24.0755%" y="389" width="1.0023%" height="15" fill="rgb(215,211,37)" fg:x="14844" fg:w="618"/><text x="24.3255%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (375 samples, 0.61%)</title><rect x="24.4696%" y="373" width="0.6082%" height="15" fill="rgb(241,128,51)" fg:x="15087" fg:w="375"/><text x="24.7196%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (375 samples, 0.61%)</title><rect x="24.4696%" y="357" width="0.6082%" height="15" fill="rgb(227,165,31)" fg:x="15087" fg:w="375"/><text x="24.7196%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.03%)</title><rect x="25.0779%" y="389" width="0.0324%" height="15" fill="rgb(228,167,24)" fg:x="15462" fg:w="20"/><text x="25.3279%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.03%)</title><rect x="25.0779%" y="373" width="0.0324%" height="15" fill="rgb(228,143,12)" fg:x="15462" fg:w="20"/><text x="25.3279%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.02%)</title><rect x="25.0876%" y="357" width="0.0227%" height="15" fill="rgb(249,149,8)" fg:x="15468" fg:w="14"/><text x="25.3376%" y="367.50"></text></g><g><title>&lt;diskann::vector::VectorList as core::ops::index::Index&lt;usize&gt;&gt;::index (442 samples, 0.72%)</title><rect x="25.1103%" y="389" width="0.7169%" height="15" fill="rgb(243,35,44)" fg:x="15482" fg:w="442"/><text x="25.3603%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (141 samples, 0.23%)</title><rect x="25.5985%" y="373" width="0.2287%" height="15" fill="rgb(246,89,9)" fg:x="15783" fg:w="141"/><text x="25.8485%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (141 samples, 0.23%)</title><rect x="25.5985%" y="357" width="0.2287%" height="15" fill="rgb(233,213,13)" fg:x="15783" fg:w="141"/><text x="25.8485%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (141 samples, 0.23%)</title><rect x="25.5985%" y="341" width="0.2287%" height="15" fill="rgb(233,141,41)" fg:x="15783" fg:w="141"/><text x="25.8485%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (133 samples, 0.22%)</title><rect x="25.6115%" y="325" width="0.2157%" height="15" fill="rgb(239,167,4)" fg:x="15791" fg:w="133"/><text x="25.8615%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (15 samples, 0.02%)</title><rect x="25.8272%" y="389" width="0.0243%" height="15" fill="rgb(209,217,16)" fg:x="15924" fg:w="15"/><text x="26.0772%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (498 samples, 0.81%)</title><rect x="25.8515%" y="389" width="0.8077%" height="15" fill="rgb(219,88,35)" fg:x="15939" fg:w="498"/><text x="26.1015%" y="399.50"></text></g><g><title>core::ptr::write (218 samples, 0.35%)</title><rect x="26.3056%" y="373" width="0.3536%" height="15" fill="rgb(220,193,23)" fg:x="16219" fg:w="218"/><text x="26.5556%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.04%)</title><rect x="26.6770%" y="389" width="0.0357%" height="15" fill="rgb(230,90,52)" fg:x="16448" fg:w="22"/><text x="26.9270%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (22 samples, 0.04%)</title><rect x="26.6770%" y="373" width="0.0357%" height="15" fill="rgb(252,106,19)" fg:x="16448" fg:w="22"/><text x="26.9270%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (21 samples, 0.03%)</title><rect x="26.6787%" y="357" width="0.0341%" height="15" fill="rgb(206,74,20)" fg:x="16449" fg:w="21"/><text x="26.9287%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (11 samples, 0.02%)</title><rect x="26.7160%" y="325" width="0.0178%" height="15" fill="rgb(230,138,44)" fg:x="16472" fg:w="11"/><text x="26.9660%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (10 samples, 0.02%)</title><rect x="26.7338%" y="325" width="0.0162%" height="15" fill="rgb(235,182,43)" fg:x="16483" fg:w="10"/><text x="26.9838%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (30 samples, 0.05%)</title><rect x="26.7127%" y="357" width="0.0487%" height="15" fill="rgb(242,16,51)" fg:x="16470" fg:w="30"/><text x="26.9627%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (30 samples, 0.05%)</title><rect x="26.7127%" y="341" width="0.0487%" height="15" fill="rgb(248,9,4)" fg:x="16470" fg:w="30"/><text x="26.9627%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (14 samples, 0.02%)</title><rect x="26.7744%" y="341" width="0.0227%" height="15" fill="rgb(210,31,22)" fg:x="16508" fg:w="14"/><text x="27.0244%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (11 samples, 0.02%)</title><rect x="26.7792%" y="325" width="0.0178%" height="15" fill="rgb(239,54,39)" fg:x="16511" fg:w="11"/><text x="27.0292%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (7 samples, 0.01%)</title><rect x="26.7857%" y="309" width="0.0114%" height="15" fill="rgb(230,99,41)" fg:x="16515" fg:w="7"/><text x="27.0357%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (26 samples, 0.04%)</title><rect x="26.8100%" y="309" width="0.0422%" height="15" fill="rgb(253,106,12)" fg:x="16530" fg:w="26"/><text x="27.0600%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (12 samples, 0.02%)</title><rect x="26.8327%" y="293" width="0.0195%" height="15" fill="rgb(213,46,41)" fg:x="16544" fg:w="12"/><text x="27.0827%" y="303.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (7 samples, 0.01%)</title><rect x="26.8409%" y="277" width="0.0114%" height="15" fill="rgb(215,133,35)" fg:x="16549" fg:w="7"/><text x="27.0909%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (11 samples, 0.02%)</title><rect x="26.8522%" y="309" width="0.0178%" height="15" fill="rgb(213,28,5)" fg:x="16556" fg:w="11"/><text x="27.1022%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7 samples, 0.01%)</title><rect x="26.8701%" y="277" width="0.0114%" height="15" fill="rgb(215,77,49)" fg:x="16567" fg:w="7"/><text x="27.1201%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (9 samples, 0.01%)</title><rect x="26.8701%" y="293" width="0.0146%" height="15" fill="rgb(248,100,22)" fg:x="16567" fg:w="9"/><text x="27.1201%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (61 samples, 0.10%)</title><rect x="26.7971%" y="341" width="0.0989%" height="15" fill="rgb(208,67,9)" fg:x="16522" fg:w="61"/><text x="27.0471%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (61 samples, 0.10%)</title><rect x="26.7971%" y="325" width="0.0989%" height="15" fill="rgb(219,133,21)" fg:x="16522" fg:w="61"/><text x="27.0471%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (16 samples, 0.03%)</title><rect x="26.8701%" y="309" width="0.0260%" height="15" fill="rgb(246,46,29)" fg:x="16567" fg:w="16"/><text x="27.1201%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (7 samples, 0.01%)</title><rect x="26.8847%" y="293" width="0.0114%" height="15" fill="rgb(246,185,52)" fg:x="16576" fg:w="7"/><text x="27.1347%" y="303.50"></text></g><g><title>core::intrinsics::copy (30 samples, 0.05%)</title><rect x="26.9593%" y="293" width="0.0487%" height="15" fill="rgb(252,136,11)" fg:x="16622" fg:w="30"/><text x="27.2093%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.04%)</title><rect x="27.0079%" y="293" width="0.0389%" height="15" fill="rgb(219,138,53)" fg:x="16652" fg:w="24"/><text x="27.2579%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (29 samples, 0.05%)</title><rect x="27.0468%" y="277" width="0.0470%" height="15" fill="rgb(211,51,23)" fg:x="16676" fg:w="29"/><text x="27.2968%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (124 samples, 0.20%)</title><rect x="26.8960%" y="341" width="0.2011%" height="15" fill="rgb(247,221,28)" fg:x="16583" fg:w="124"/><text x="27.1460%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (121 samples, 0.20%)</title><rect x="26.9009%" y="325" width="0.1963%" height="15" fill="rgb(251,222,45)" fg:x="16586" fg:w="121"/><text x="27.1509%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (85 samples, 0.14%)</title><rect x="26.9593%" y="309" width="0.1379%" height="15" fill="rgb(217,162,53)" fg:x="16622" fg:w="85"/><text x="27.2093%" y="319.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (31 samples, 0.05%)</title><rect x="27.0468%" y="293" width="0.0503%" height="15" fill="rgb(229,93,14)" fg:x="16676" fg:w="31"/><text x="27.2968%" y="303.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (9 samples, 0.01%)</title><rect x="27.1004%" y="325" width="0.0146%" height="15" fill="rgb(209,67,49)" fg:x="16709" fg:w="9"/><text x="27.3504%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (8 samples, 0.01%)</title><rect x="27.1669%" y="277" width="0.0130%" height="15" fill="rgb(213,87,29)" fg:x="16750" fg:w="8"/><text x="27.4169%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.01%)</title><rect x="27.1896%" y="261" width="0.0114%" height="15" fill="rgb(205,151,52)" fg:x="16764" fg:w="7"/><text x="27.4396%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (47 samples, 0.08%)</title><rect x="27.1360%" y="293" width="0.0762%" height="15" fill="rgb(253,215,39)" fg:x="16731" fg:w="47"/><text x="27.3860%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (20 samples, 0.03%)</title><rect x="27.1798%" y="277" width="0.0324%" height="15" fill="rgb(221,220,41)" fg:x="16758" fg:w="20"/><text x="27.4298%" y="287.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (7 samples, 0.01%)</title><rect x="27.2009%" y="261" width="0.0114%" height="15" fill="rgb(218,133,21)" fg:x="16771" fg:w="7"/><text x="27.4509%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (31 samples, 0.05%)</title><rect x="27.2123%" y="293" width="0.0503%" height="15" fill="rgb(221,193,43)" fg:x="16778" fg:w="31"/><text x="27.4623%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10 samples, 0.02%)</title><rect x="27.2690%" y="277" width="0.0162%" height="15" fill="rgb(240,128,52)" fg:x="16813" fg:w="10"/><text x="27.5190%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (114 samples, 0.18%)</title><rect x="27.1150%" y="325" width="0.1849%" height="15" fill="rgb(253,114,12)" fg:x="16718" fg:w="114"/><text x="27.3650%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (114 samples, 0.18%)</title><rect x="27.1150%" y="309" width="0.1849%" height="15" fill="rgb(215,223,47)" fg:x="16718" fg:w="114"/><text x="27.3650%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (19 samples, 0.03%)</title><rect x="27.2690%" y="293" width="0.0308%" height="15" fill="rgb(248,225,23)" fg:x="16813" fg:w="19"/><text x="27.5190%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (9 samples, 0.01%)</title><rect x="27.2853%" y="277" width="0.0146%" height="15" fill="rgb(250,108,0)" fg:x="16823" fg:w="9"/><text x="27.5353%" y="287.50"></text></g><g><title>core::intrinsics::copy (35 samples, 0.06%)</title><rect x="27.3485%" y="277" width="0.0568%" height="15" fill="rgb(228,208,7)" fg:x="16862" fg:w="35"/><text x="27.5985%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.02%)</title><rect x="27.4053%" y="277" width="0.0243%" height="15" fill="rgb(244,45,10)" fg:x="16897" fg:w="15"/><text x="27.6553%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (31 samples, 0.05%)</title><rect x="27.4296%" y="261" width="0.0503%" height="15" fill="rgb(207,125,25)" fg:x="16912" fg:w="31"/><text x="27.6796%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (113 samples, 0.18%)</title><rect x="27.2999%" y="325" width="0.1833%" height="15" fill="rgb(210,195,18)" fg:x="16832" fg:w="113"/><text x="27.5499%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (110 samples, 0.18%)</title><rect x="27.3047%" y="309" width="0.1784%" height="15" fill="rgb(249,80,12)" fg:x="16835" fg:w="110"/><text x="27.5547%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (83 samples, 0.13%)</title><rect x="27.3485%" y="293" width="0.1346%" height="15" fill="rgb(221,65,9)" fg:x="16862" fg:w="83"/><text x="27.5985%" y="303.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (33 samples, 0.05%)</title><rect x="27.4296%" y="277" width="0.0535%" height="15" fill="rgb(235,49,36)" fg:x="16912" fg:w="33"/><text x="27.6796%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="27.5123%" y="277" width="0.0130%" height="15" fill="rgb(225,32,20)" fg:x="16963" fg:w="8"/><text x="27.7623%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (17 samples, 0.03%)</title><rect x="27.5642%" y="261" width="0.0276%" height="15" fill="rgb(215,141,46)" fg:x="16995" fg:w="17"/><text x="27.8142%" y="271.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (10 samples, 0.02%)</title><rect x="27.5756%" y="245" width="0.0162%" height="15" fill="rgb(250,160,47)" fg:x="17002" fg:w="10"/><text x="27.8256%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="27.5983%" y="245" width="0.0162%" height="15" fill="rgb(216,222,40)" fg:x="17016" fg:w="10"/><text x="27.8483%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (55 samples, 0.09%)</title><rect x="27.5350%" y="277" width="0.0892%" height="15" fill="rgb(234,217,39)" fg:x="16977" fg:w="55"/><text x="27.7850%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (20 samples, 0.03%)</title><rect x="27.5918%" y="261" width="0.0324%" height="15" fill="rgb(207,178,40)" fg:x="17012" fg:w="20"/><text x="27.8418%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (42 samples, 0.07%)</title><rect x="27.6242%" y="277" width="0.0681%" height="15" fill="rgb(221,136,13)" fg:x="17032" fg:w="42"/><text x="27.8742%" y="287.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (7 samples, 0.01%)</title><rect x="27.7134%" y="245" width="0.0114%" height="15" fill="rgb(249,199,10)" fg:x="17087" fg:w="7"/><text x="27.9634%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (140 samples, 0.23%)</title><rect x="27.5010%" y="309" width="0.2271%" height="15" fill="rgb(249,222,13)" fg:x="16956" fg:w="140"/><text x="27.7510%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (140 samples, 0.23%)</title><rect x="27.5010%" y="293" width="0.2271%" height="15" fill="rgb(244,185,38)" fg:x="16956" fg:w="140"/><text x="27.7510%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (21 samples, 0.03%)</title><rect x="27.6940%" y="277" width="0.0341%" height="15" fill="rgb(236,202,9)" fg:x="17075" fg:w="21"/><text x="27.9440%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (16 samples, 0.03%)</title><rect x="27.7021%" y="261" width="0.0260%" height="15" fill="rgb(250,229,37)" fg:x="17080" fg:w="16"/><text x="27.9521%" y="271.50"></text></g><g><title>core::intrinsics::copy (24 samples, 0.04%)</title><rect x="27.7718%" y="261" width="0.0389%" height="15" fill="rgb(206,174,23)" fg:x="17123" fg:w="24"/><text x="28.0218%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="27.8108%" y="261" width="0.0130%" height="15" fill="rgb(211,33,43)" fg:x="17147" fg:w="8"/><text x="28.0608%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (21 samples, 0.03%)</title><rect x="27.8254%" y="245" width="0.0341%" height="15" fill="rgb(245,58,50)" fg:x="17156" fg:w="21"/><text x="28.0754%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (83 samples, 0.13%)</title><rect x="27.7280%" y="309" width="0.1346%" height="15" fill="rgb(244,68,36)" fg:x="17096" fg:w="83"/><text x="27.9780%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (80 samples, 0.13%)</title><rect x="27.7329%" y="293" width="0.1298%" height="15" fill="rgb(232,229,15)" fg:x="17099" fg:w="80"/><text x="27.9829%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (56 samples, 0.09%)</title><rect x="27.7718%" y="277" width="0.0908%" height="15" fill="rgb(254,30,23)" fg:x="17123" fg:w="56"/><text x="28.0218%" y="287.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (23 samples, 0.04%)</title><rect x="27.8254%" y="261" width="0.0373%" height="15" fill="rgb(235,160,14)" fg:x="17156" fg:w="23"/><text x="28.0754%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="27.8967%" y="261" width="0.0130%" height="15" fill="rgb(212,155,44)" fg:x="17200" fg:w="8"/><text x="28.1467%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (15 samples, 0.02%)</title><rect x="27.9729%" y="245" width="0.0243%" height="15" fill="rgb(226,2,50)" fg:x="17247" fg:w="15"/><text x="28.2229%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (7 samples, 0.01%)</title><rect x="27.9859%" y="229" width="0.0114%" height="15" fill="rgb(234,177,6)" fg:x="17255" fg:w="7"/><text x="28.2359%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="28.0086%" y="229" width="0.0162%" height="15" fill="rgb(217,24,9)" fg:x="17269" fg:w="10"/><text x="28.2586%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (9 samples, 0.01%)</title><rect x="28.0248%" y="213" width="0.0146%" height="15" fill="rgb(220,13,46)" fg:x="17279" fg:w="9"/><text x="28.2748%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (79 samples, 0.13%)</title><rect x="27.9146%" y="261" width="0.1281%" height="15" fill="rgb(239,221,27)" fg:x="17211" fg:w="79"/><text x="28.1646%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (28 samples, 0.05%)</title><rect x="27.9973%" y="245" width="0.0454%" height="15" fill="rgb(222,198,25)" fg:x="17262" fg:w="28"/><text x="28.2473%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (11 samples, 0.02%)</title><rect x="28.0248%" y="229" width="0.0178%" height="15" fill="rgb(211,99,13)" fg:x="17279" fg:w="11"/><text x="28.2748%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (46 samples, 0.07%)</title><rect x="28.0427%" y="261" width="0.0746%" height="15" fill="rgb(232,111,31)" fg:x="17290" fg:w="46"/><text x="28.2927%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (8 samples, 0.01%)</title><rect x="28.1254%" y="245" width="0.0130%" height="15" fill="rgb(245,82,37)" fg:x="17341" fg:w="8"/><text x="28.3754%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (161 samples, 0.26%)</title><rect x="27.8886%" y="293" width="0.2611%" height="15" fill="rgb(227,149,46)" fg:x="17195" fg:w="161"/><text x="28.1386%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (161 samples, 0.26%)</title><rect x="27.8886%" y="277" width="0.2611%" height="15" fill="rgb(218,36,50)" fg:x="17195" fg:w="161"/><text x="28.1386%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (15 samples, 0.02%)</title><rect x="28.1254%" y="261" width="0.0243%" height="15" fill="rgb(226,80,48)" fg:x="17341" fg:w="15"/><text x="28.3754%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (7 samples, 0.01%)</title><rect x="28.1384%" y="245" width="0.0114%" height="15" fill="rgb(238,224,15)" fg:x="17349" fg:w="7"/><text x="28.3884%" y="255.50"></text></g><g><title>core::intrinsics::copy (16 samples, 0.03%)</title><rect x="28.1757%" y="245" width="0.0260%" height="15" fill="rgb(241,136,10)" fg:x="17372" fg:w="16"/><text x="28.4257%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.02%)</title><rect x="28.2016%" y="245" width="0.0211%" height="15" fill="rgb(208,32,45)" fg:x="17388" fg:w="13"/><text x="28.4516%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (16 samples, 0.03%)</title><rect x="28.2260%" y="229" width="0.0260%" height="15" fill="rgb(207,135,9)" fg:x="17403" fg:w="16"/><text x="28.4760%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (65 samples, 0.11%)</title><rect x="28.1497%" y="293" width="0.1054%" height="15" fill="rgb(206,86,44)" fg:x="17356" fg:w="65"/><text x="28.3997%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (62 samples, 0.10%)</title><rect x="28.1546%" y="277" width="0.1006%" height="15" fill="rgb(245,177,15)" fg:x="17359" fg:w="62"/><text x="28.4046%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (49 samples, 0.08%)</title><rect x="28.1757%" y="261" width="0.0795%" height="15" fill="rgb(206,64,50)" fg:x="17372" fg:w="49"/><text x="28.4257%" y="271.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (18 samples, 0.03%)</title><rect x="28.2260%" y="245" width="0.0292%" height="15" fill="rgb(234,36,40)" fg:x="17403" fg:w="18"/><text x="28.4760%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (10 samples, 0.02%)</title><rect x="28.3217%" y="229" width="0.0162%" height="15" fill="rgb(213,64,8)" fg:x="17462" fg:w="10"/><text x="28.5717%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="28.3476%" y="213" width="0.0130%" height="15" fill="rgb(210,75,36)" fg:x="17478" fg:w="8"/><text x="28.5976%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (50 samples, 0.08%)</title><rect x="28.2941%" y="245" width="0.0811%" height="15" fill="rgb(229,88,21)" fg:x="17445" fg:w="50"/><text x="28.5441%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (23 samples, 0.04%)</title><rect x="28.3379%" y="229" width="0.0373%" height="15" fill="rgb(252,204,47)" fg:x="17472" fg:w="23"/><text x="28.5879%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (9 samples, 0.01%)</title><rect x="28.3606%" y="213" width="0.0146%" height="15" fill="rgb(208,77,27)" fg:x="17486" fg:w="9"/><text x="28.6106%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (29 samples, 0.05%)</title><rect x="28.3752%" y="245" width="0.0470%" height="15" fill="rgb(221,76,26)" fg:x="17495" fg:w="29"/><text x="28.6252%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (102 samples, 0.17%)</title><rect x="28.2730%" y="277" width="0.1654%" height="15" fill="rgb(225,139,18)" fg:x="17432" fg:w="102"/><text x="28.5230%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (102 samples, 0.17%)</title><rect x="28.2730%" y="261" width="0.1654%" height="15" fill="rgb(230,137,11)" fg:x="17432" fg:w="102"/><text x="28.5230%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (10 samples, 0.02%)</title><rect x="28.4222%" y="245" width="0.0162%" height="15" fill="rgb(212,28,1)" fg:x="17524" fg:w="10"/><text x="28.6722%" y="255.50"></text></g><g><title>core::intrinsics::copy (9 samples, 0.01%)</title><rect x="28.4579%" y="229" width="0.0146%" height="15" fill="rgb(248,164,17)" fg:x="17546" fg:w="9"/><text x="28.7079%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (11 samples, 0.02%)</title><rect x="28.4822%" y="213" width="0.0178%" height="15" fill="rgb(222,171,42)" fg:x="17561" fg:w="11"/><text x="28.7322%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (40 samples, 0.06%)</title><rect x="28.4384%" y="277" width="0.0649%" height="15" fill="rgb(243,84,45)" fg:x="17534" fg:w="40"/><text x="28.6884%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (39 samples, 0.06%)</title><rect x="28.4401%" y="261" width="0.0633%" height="15" fill="rgb(252,49,23)" fg:x="17535" fg:w="39"/><text x="28.6901%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (28 samples, 0.05%)</title><rect x="28.4579%" y="245" width="0.0454%" height="15" fill="rgb(215,19,7)" fg:x="17546" fg:w="28"/><text x="28.7079%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (13 samples, 0.02%)</title><rect x="28.4822%" y="229" width="0.0211%" height="15" fill="rgb(238,81,41)" fg:x="17561" fg:w="13"/><text x="28.7322%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (9 samples, 0.01%)</title><rect x="28.5406%" y="213" width="0.0146%" height="15" fill="rgb(210,199,37)" fg:x="17597" fg:w="9"/><text x="28.7906%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (29 samples, 0.05%)</title><rect x="28.5211%" y="229" width="0.0470%" height="15" fill="rgb(244,192,49)" fg:x="17585" fg:w="29"/><text x="28.7711%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (8 samples, 0.01%)</title><rect x="28.5552%" y="213" width="0.0130%" height="15" fill="rgb(226,211,11)" fg:x="17606" fg:w="8"/><text x="28.8052%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (11 samples, 0.02%)</title><rect x="28.5682%" y="229" width="0.0178%" height="15" fill="rgb(236,162,54)" fg:x="17614" fg:w="11"/><text x="28.8182%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (57 samples, 0.09%)</title><rect x="28.5098%" y="261" width="0.0924%" height="15" fill="rgb(220,229,9)" fg:x="17578" fg:w="57"/><text x="28.7598%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (57 samples, 0.09%)</title><rect x="28.5098%" y="245" width="0.0924%" height="15" fill="rgb(250,87,22)" fg:x="17578" fg:w="57"/><text x="28.7598%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (8 samples, 0.01%)</title><rect x="28.5893%" y="229" width="0.0130%" height="15" fill="rgb(239,43,17)" fg:x="17627" fg:w="8"/><text x="28.8393%" y="239.50"></text></g><g><title>core::intrinsics::copy (8 samples, 0.01%)</title><rect x="28.6104%" y="213" width="0.0130%" height="15" fill="rgb(231,177,25)" fg:x="17640" fg:w="8"/><text x="28.8604%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (25 samples, 0.04%)</title><rect x="28.6022%" y="261" width="0.0405%" height="15" fill="rgb(219,179,1)" fg:x="17635" fg:w="25"/><text x="28.8522%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (23 samples, 0.04%)</title><rect x="28.6055%" y="245" width="0.0373%" height="15" fill="rgb(238,219,53)" fg:x="17637" fg:w="23"/><text x="28.8555%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (20 samples, 0.03%)</title><rect x="28.6104%" y="229" width="0.0324%" height="15" fill="rgb(232,167,36)" fg:x="17640" fg:w="20"/><text x="28.8604%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (8 samples, 0.01%)</title><rect x="28.6298%" y="213" width="0.0130%" height="15" fill="rgb(244,19,51)" fg:x="17652" fg:w="8"/><text x="28.8798%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (8 samples, 0.01%)</title><rect x="28.6298%" y="197" width="0.0130%" height="15" fill="rgb(224,6,22)" fg:x="17652" fg:w="8"/><text x="28.8798%" y="207.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (8 samples, 0.01%)</title><rect x="28.6541%" y="213" width="0.0130%" height="15" fill="rgb(224,145,5)" fg:x="17667" fg:w="8"/><text x="28.9041%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7 samples, 0.01%)</title><rect x="28.6671%" y="213" width="0.0114%" height="15" fill="rgb(234,130,49)" fg:x="17675" fg:w="7"/><text x="28.9171%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (22 samples, 0.04%)</title><rect x="28.6477%" y="245" width="0.0357%" height="15" fill="rgb(254,6,2)" fg:x="17663" fg:w="22"/><text x="28.8977%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (22 samples, 0.04%)</title><rect x="28.6477%" y="229" width="0.0357%" height="15" fill="rgb(208,96,46)" fg:x="17663" fg:w="22"/><text x="28.8977%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (1,231 samples, 2.00%)</title><rect x="26.7127%" y="389" width="1.9966%" height="15" fill="rgb(239,3,39)" fg:x="16470" fg:w="1231"/><text x="26.9627%" y="399.50">c..</text></g><g><title>core::slice::sort::unstable::sort (1,231 samples, 2.00%)</title><rect x="26.7127%" y="373" width="1.9966%" height="15" fill="rgb(233,210,1)" fg:x="16470" fg:w="1231"/><text x="26.9627%" y="383.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,197 samples, 1.94%)</title><rect x="26.7679%" y="357" width="1.9414%" height="15" fill="rgb(244,137,37)" fg:x="16504" fg:w="1197"/><text x="27.0179%" y="367.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (994 samples, 1.61%)</title><rect x="27.0971%" y="341" width="1.6122%" height="15" fill="rgb(240,136,2)" fg:x="16707" fg:w="994"/><text x="27.3471%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (756 samples, 1.23%)</title><rect x="27.4831%" y="325" width="1.2262%" height="15" fill="rgb(239,18,37)" fg:x="16945" fg:w="756"/><text x="27.7331%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (522 samples, 0.85%)</title><rect x="27.8627%" y="309" width="0.8466%" height="15" fill="rgb(218,185,22)" fg:x="17179" fg:w="522"/><text x="28.1127%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (280 samples, 0.45%)</title><rect x="28.2552%" y="293" width="0.4541%" height="15" fill="rgb(225,218,4)" fg:x="17421" fg:w="280"/><text x="28.5052%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (127 samples, 0.21%)</title><rect x="28.5033%" y="277" width="0.2060%" height="15" fill="rgb(230,182,32)" fg:x="17574" fg:w="127"/><text x="28.7533%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (41 samples, 0.07%)</title><rect x="28.6428%" y="261" width="0.0665%" height="15" fill="rgb(242,56,43)" fg:x="17660" fg:w="41"/><text x="28.8928%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (10 samples, 0.02%)</title><rect x="28.6931%" y="245" width="0.0162%" height="15" fill="rgb(233,99,24)" fg:x="17691" fg:w="10"/><text x="28.9431%" y="255.50"></text></g><g><title>sched_tick (14 samples, 0.02%)</title><rect x="41.8207%" y="261" width="0.0227%" height="15" fill="rgb(234,209,42)" fg:x="25785" fg:w="14"/><text x="42.0707%" y="271.50"></text></g><g><title>update_process_times (24 samples, 0.04%)</title><rect x="41.8110%" y="277" width="0.0389%" height="15" fill="rgb(227,7,12)" fg:x="25779" fg:w="24"/><text x="42.0610%" y="287.50"></text></g><g><title>__hrtimer_run_queues (32 samples, 0.05%)</title><rect x="41.8045%" y="309" width="0.0519%" height="15" fill="rgb(245,203,43)" fg:x="25775" fg:w="32"/><text x="42.0545%" y="319.50"></text></g><g><title>tick_nohz_handler (29 samples, 0.05%)</title><rect x="41.8094%" y="293" width="0.0470%" height="15" fill="rgb(238,205,33)" fg:x="25778" fg:w="29"/><text x="42.0594%" y="303.50"></text></g><g><title>hrtimer_interrupt (34 samples, 0.06%)</title><rect x="41.8029%" y="325" width="0.0551%" height="15" fill="rgb(231,56,7)" fg:x="25774" fg:w="34"/><text x="42.0529%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (36 samples, 0.06%)</title><rect x="41.8013%" y="341" width="0.0584%" height="15" fill="rgb(244,186,29)" fg:x="25773" fg:w="36"/><text x="42.0513%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (47 samples, 0.08%)</title><rect x="41.7948%" y="373" width="0.0762%" height="15" fill="rgb(234,111,31)" fg:x="25769" fg:w="47"/><text x="42.0448%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (43 samples, 0.07%)</title><rect x="41.8013%" y="357" width="0.0697%" height="15" fill="rgb(241,149,10)" fg:x="25773" fg:w="43"/><text x="42.0513%" y="367.50"></text></g><g><title>irq_exit_rcu (7 samples, 0.01%)</title><rect x="41.8597%" y="341" width="0.0114%" height="15" fill="rgb(249,206,44)" fg:x="25809" fg:w="7"/><text x="42.1097%" y="351.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_add_ps (315 samples, 0.51%)</title><rect x="41.8743%" y="373" width="0.5109%" height="15" fill="rgb(251,153,30)" fg:x="25818" fg:w="315"/><text x="42.1243%" y="383.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_extractf128_ps (368 samples, 0.60%)</title><rect x="42.3852%" y="373" width="0.5969%" height="15" fill="rgb(239,152,38)" fg:x="26133" fg:w="368"/><text x="42.6352%" y="383.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_hadd_ps (522 samples, 0.85%)</title><rect x="42.9820%" y="373" width="0.8466%" height="15" fill="rgb(249,139,47)" fg:x="26501" fg:w="522"/><text x="43.2320%" y="383.50"></text></g><g><title>handle_softirqs (7 samples, 0.01%)</title><rect x="81.7033%" y="309" width="0.0114%" height="15" fill="rgb(244,64,35)" fg:x="50375" fg:w="7"/><text x="81.9533%" y="319.50"></text></g><g><title>asm_common_interrupt (9 samples, 0.01%)</title><rect x="81.7017%" y="357" width="0.0146%" height="15" fill="rgb(216,46,15)" fg:x="50374" fg:w="9"/><text x="81.9517%" y="367.50"></text></g><g><title>common_interrupt (9 samples, 0.01%)</title><rect x="81.7017%" y="341" width="0.0146%" height="15" fill="rgb(250,74,19)" fg:x="50374" fg:w="9"/><text x="81.9517%" y="351.50"></text></g><g><title>irq_exit_rcu (8 samples, 0.01%)</title><rect x="81.7033%" y="325" width="0.0130%" height="15" fill="rgb(249,42,33)" fg:x="50375" fg:w="8"/><text x="81.9533%" y="335.50"></text></g><g><title>update_curr (12 samples, 0.02%)</title><rect x="81.8152%" y="213" width="0.0195%" height="15" fill="rgb(242,149,17)" fg:x="50444" fg:w="12"/><text x="82.0652%" y="223.50"></text></g><g><title>task_tick_fair (31 samples, 0.05%)</title><rect x="81.7893%" y="229" width="0.0503%" height="15" fill="rgb(244,29,21)" fg:x="50428" fg:w="31"/><text x="82.0393%" y="239.50"></text></g><g><title>sched_tick (49 samples, 0.08%)</title><rect x="81.7650%" y="245" width="0.0795%" height="15" fill="rgb(220,130,37)" fg:x="50413" fg:w="49"/><text x="82.0150%" y="255.50"></text></g><g><title>update_process_times (65 samples, 0.11%)</title><rect x="81.7439%" y="261" width="0.1054%" height="15" fill="rgb(211,67,2)" fg:x="50400" fg:w="65"/><text x="81.9939%" y="271.50"></text></g><g><title>tick_nohz_handler (78 samples, 0.13%)</title><rect x="81.7422%" y="277" width="0.1265%" height="15" fill="rgb(235,68,52)" fg:x="50399" fg:w="78"/><text x="81.9922%" y="287.50"></text></g><g><title>update_wall_time (12 samples, 0.02%)</title><rect x="81.8493%" y="261" width="0.0195%" height="15" fill="rgb(246,142,3)" fg:x="50465" fg:w="12"/><text x="82.0993%" y="271.50"></text></g><g><title>timekeeping_advance (12 samples, 0.02%)</title><rect x="81.8493%" y="245" width="0.0195%" height="15" fill="rgb(241,25,7)" fg:x="50465" fg:w="12"/><text x="82.0993%" y="255.50"></text></g><g><title>timekeeping_update (7 samples, 0.01%)</title><rect x="81.8574%" y="229" width="0.0114%" height="15" fill="rgb(242,119,39)" fg:x="50470" fg:w="7"/><text x="82.1074%" y="239.50"></text></g><g><title>__sysvec_apic_timer_interrupt (86 samples, 0.14%)</title><rect x="81.7325%" y="325" width="0.1395%" height="15" fill="rgb(241,98,45)" fg:x="50393" fg:w="86"/><text x="81.9825%" y="335.50"></text></g><g><title>hrtimer_interrupt (86 samples, 0.14%)</title><rect x="81.7325%" y="309" width="0.1395%" height="15" fill="rgb(254,28,30)" fg:x="50393" fg:w="86"/><text x="81.9825%" y="319.50"></text></g><g><title>__hrtimer_run_queues (86 samples, 0.14%)</title><rect x="81.7325%" y="293" width="0.1395%" height="15" fill="rgb(241,142,54)" fg:x="50393" fg:w="86"/><text x="81.9825%" y="303.50"></text></g><g><title>handle_softirqs (16 samples, 0.03%)</title><rect x="81.8720%" y="309" width="0.0260%" height="15" fill="rgb(222,85,15)" fg:x="50479" fg:w="16"/><text x="82.1220%" y="319.50"></text></g><g><title>irq_exit_rcu (17 samples, 0.03%)</title><rect x="81.8720%" y="325" width="0.0276%" height="15" fill="rgb(210,85,47)" fg:x="50479" fg:w="17"/><text x="82.1220%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (114 samples, 0.18%)</title><rect x="81.7163%" y="357" width="0.1849%" height="15" fill="rgb(224,206,25)" fg:x="50383" fg:w="114"/><text x="81.9663%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (104 samples, 0.17%)</title><rect x="81.7325%" y="341" width="0.1687%" height="15" fill="rgb(243,201,19)" fg:x="50393" fg:w="104"/><text x="81.9825%" y="351.50"></text></g><g><title>core::core_arch::x86::f16c::_mm256_cvtph_ps (23,478 samples, 38.08%)</title><rect x="43.8287%" y="373" width="38.0790%" height="15" fill="rgb(236,59,4)" fg:x="27023" fg:w="23478"/><text x="44.0787%" y="383.50">core::core_arch::x86::f16c::_mm256_cvtph_ps</text></g><g><title>task_tick_fair (10 samples, 0.02%)</title><rect x="94.5974%" y="229" width="0.0162%" height="15" fill="rgb(254,179,45)" fg:x="58325" fg:w="10"/><text x="94.8474%" y="239.50"></text></g><g><title>sched_tick (14 samples, 0.02%)</title><rect x="94.5926%" y="245" width="0.0227%" height="15" fill="rgb(226,14,10)" fg:x="58322" fg:w="14"/><text x="94.8426%" y="255.50"></text></g><g><title>update_process_times (17 samples, 0.03%)</title><rect x="94.5893%" y="261" width="0.0276%" height="15" fill="rgb(244,27,41)" fg:x="58320" fg:w="17"/><text x="94.8393%" y="271.50"></text></g><g><title>__hrtimer_run_queues (19 samples, 0.03%)</title><rect x="94.5877%" y="293" width="0.0308%" height="15" fill="rgb(235,35,32)" fg:x="58319" fg:w="19"/><text x="94.8377%" y="303.50"></text></g><g><title>tick_nohz_handler (19 samples, 0.03%)</title><rect x="94.5877%" y="277" width="0.0308%" height="15" fill="rgb(218,68,31)" fg:x="58319" fg:w="19"/><text x="94.8377%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (23 samples, 0.04%)</title><rect x="94.5877%" y="325" width="0.0373%" height="15" fill="rgb(207,120,37)" fg:x="58319" fg:w="23"/><text x="94.8377%" y="335.50"></text></g><g><title>hrtimer_interrupt (23 samples, 0.04%)</title><rect x="94.5877%" y="309" width="0.0373%" height="15" fill="rgb(227,98,0)" fg:x="58319" fg:w="23"/><text x="94.8377%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (28 samples, 0.05%)</title><rect x="94.5828%" y="357" width="0.0454%" height="15" fill="rgb(207,7,3)" fg:x="58316" fg:w="28"/><text x="94.8328%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (25 samples, 0.04%)</title><rect x="94.5877%" y="341" width="0.0405%" height="15" fill="rgb(206,98,19)" fg:x="58319" fg:w="25"/><text x="94.8377%" y="351.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_ps (7,844 samples, 12.72%)</title><rect x="81.9077%" y="373" width="12.7222%" height="15" fill="rgb(217,5,26)" fg:x="50501" fg:w="7844"/><text x="82.1577%" y="383.50">core::core_arch::x8..</text></g><g><title>core::core_arch::x86::sse::_mm_add_ps (452 samples, 0.73%)</title><rect x="94.6299%" y="373" width="0.7331%" height="15" fill="rgb(235,190,38)" fg:x="58345" fg:w="452"/><text x="94.8799%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (58,470 samples, 94.83%)</title><rect x="0.7023%" y="437" width="94.8326%" height="15" fill="rgb(247,86,24)" fg:x="433" fg:w="58470"/><text x="0.9523%" y="447.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>diskann::build_graph::_{{closure}} (58,470 samples, 94.83%)</title><rect x="0.7023%" y="421" width="94.8326%" height="15" fill="rgb(205,101,16)" fg:x="433" fg:w="58470"/><text x="0.9523%" y="431.50">diskann::build_graph::_{{closure}}</text></g><g><title>diskann::robust_prune (45,899 samples, 74.44%)</title><rect x="21.0912%" y="405" width="74.4437%" height="15" fill="rgb(246,168,33)" fg:x="13004" fg:w="45899"/><text x="21.3412%" y="415.50">diskann::robust_prune</text></g><g><title>diskann::vector::fast_dot (41,202 samples, 66.83%)</title><rect x="28.7093%" y="389" width="66.8256%" height="15" fill="rgb(231,114,1)" fg:x="17701" fg:w="41202"/><text x="28.9593%" y="399.50">diskann::vector::fast_dot</text></g><g><title>core::core_arch::x86::sse::_mm_prefetch (106 samples, 0.17%)</title><rect x="95.3630%" y="373" width="0.1719%" height="15" fill="rgb(207,184,53)" fg:x="58797" fg:w="106"/><text x="95.6130%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58,471 samples, 94.83%)</title><rect x="0.7023%" y="453" width="94.8342%" height="15" fill="rgb(224,95,51)" fg:x="433" fg:w="58471"/><text x="0.9523%" y="463.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>diskann::build_graph (58,476 samples, 94.84%)</title><rect x="0.7023%" y="485" width="94.8424%" height="15" fill="rgb(212,188,45)" fg:x="433" fg:w="58476"/><text x="0.9523%" y="495.50">diskann::build_graph</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (58,476 samples, 94.84%)</title><rect x="0.7023%" y="469" width="94.8424%" height="15" fill="rgb(223,154,38)" fg:x="433" fg:w="58476"/><text x="0.9523%" y="479.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;diskann::vector::VectorList as core::ops::index::Index&lt;usize&gt;&gt;::index (13 samples, 0.02%)</title><rect x="95.6501%" y="469" width="0.0211%" height="15" fill="rgb(251,22,52)" fg:x="58974" fg:w="13"/><text x="95.9001%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.04%)</title><rect x="95.6711%" y="469" width="0.0357%" height="15" fill="rgb(229,209,22)" fg:x="58987" fg:w="22"/><text x="95.9211%" y="479.50"></text></g><g><title>diskann::IndexGraph::out_neighbours (39 samples, 0.06%)</title><rect x="95.7084%" y="469" width="0.0633%" height="15" fill="rgb(234,138,34)" fg:x="59010" fg:w="39"/><text x="95.9584%" y="479.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (39 samples, 0.06%)</title><rect x="95.7084%" y="453" width="0.0633%" height="15" fill="rgb(212,95,11)" fg:x="59010" fg:w="39"/><text x="95.9584%" y="463.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (39 samples, 0.06%)</title><rect x="95.7084%" y="437" width="0.0633%" height="15" fill="rgb(240,179,47)" fg:x="59010" fg:w="39"/><text x="95.9584%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (37 samples, 0.06%)</title><rect x="95.7117%" y="421" width="0.0600%" height="15" fill="rgb(240,163,11)" fg:x="59012" fg:w="37"/><text x="95.9617%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.06%)</title><rect x="95.7117%" y="405" width="0.0600%" height="15" fill="rgb(236,37,12)" fg:x="59012" fg:w="37"/><text x="95.9617%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (38 samples, 0.06%)</title><rect x="95.7895%" y="453" width="0.0616%" height="15" fill="rgb(232,164,16)" fg:x="59060" fg:w="38"/><text x="96.0395%" y="463.50"></text></g><g><title>core::intrinsics::copy (32 samples, 0.05%)</title><rect x="95.7993%" y="437" width="0.0519%" height="15" fill="rgb(244,205,15)" fg:x="59066" fg:w="32"/><text x="96.0493%" y="447.50"></text></g><g><title>[libc.so.6] (29 samples, 0.05%)</title><rect x="95.8041%" y="421" width="0.0470%" height="15" fill="rgb(223,117,47)" fg:x="59069" fg:w="29"/><text x="96.0541%" y="431.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (20 samples, 0.03%)</title><rect x="95.8820%" y="437" width="0.0324%" height="15" fill="rgb(244,107,35)" fg:x="59117" fg:w="20"/><text x="96.1320%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (42 samples, 0.07%)</title><rect x="95.8528%" y="453" width="0.0681%" height="15" fill="rgb(205,140,8)" fg:x="59099" fg:w="42"/><text x="96.1028%" y="463.50"></text></g><g><title>diskann::NeighbourBuffer::insert (93 samples, 0.15%)</title><rect x="95.7717%" y="469" width="0.1508%" height="15" fill="rgb(228,84,46)" fg:x="59049" fg:w="93"/><text x="96.0217%" y="479.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_add_ps (7 samples, 0.01%)</title><rect x="96.2550%" y="453" width="0.0114%" height="15" fill="rgb(254,188,9)" fg:x="59347" fg:w="7"/><text x="96.5050%" y="463.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_extractf128_ps (7 samples, 0.01%)</title><rect x="96.2664%" y="453" width="0.0114%" height="15" fill="rgb(206,112,54)" fg:x="59354" fg:w="7"/><text x="96.5164%" y="463.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_hadd_ps (8 samples, 0.01%)</title><rect x="96.2777%" y="453" width="0.0130%" height="15" fill="rgb(216,84,49)" fg:x="59361" fg:w="8"/><text x="96.5277%" y="463.50"></text></g><g><title>core::core_arch::x86::f16c::_mm256_cvtph_ps (503 samples, 0.82%)</title><rect x="96.2907%" y="453" width="0.8158%" height="15" fill="rgb(214,194,35)" fg:x="59369" fg:w="503"/><text x="96.5407%" y="463.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_ps (126 samples, 0.20%)</title><rect x="97.1065%" y="453" width="0.2044%" height="15" fill="rgb(249,28,3)" fg:x="59872" fg:w="126"/><text x="97.3565%" y="463.50"></text></g><g><title>core::core_arch::x86::sse::_mm_add_ps (13 samples, 0.02%)</title><rect x="97.3109%" y="453" width="0.0211%" height="15" fill="rgb(222,56,52)" fg:x="59998" fg:w="13"/><text x="97.5609%" y="463.50"></text></g><g><title>diskann::vector::fast_dot (1,307 samples, 2.12%)</title><rect x="95.9258%" y="469" width="2.1198%" height="15" fill="rgb(245,217,50)" fg:x="59144" fg:w="1307"/><text x="96.1758%" y="479.50">d..</text></g><g><title>core::core_arch::x86::sse::_mm_prefetch (440 samples, 0.71%)</title><rect x="97.3320%" y="453" width="0.7136%" height="15" fill="rgb(213,201,24)" fg:x="60011" fg:w="440"/><text x="97.5820%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.01%)</title><rect x="98.0570%" y="421" width="0.0146%" height="15" fill="rgb(248,116,28)" fg:x="60458" fg:w="9"/><text x="98.3070%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.01%)</title><rect x="98.0570%" y="405" width="0.0146%" height="15" fill="rgb(219,72,43)" fg:x="60458" fg:w="9"/><text x="98.3070%" y="415.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::finish (9 samples, 0.01%)</title><rect x="98.0570%" y="389" width="0.0146%" height="15" fill="rgb(209,138,14)" fg:x="60458" fg:w="9"/><text x="98.3070%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="98.0732%" y="405" width="0.0146%" height="15" fill="rgb(222,18,33)" fg:x="60468" fg:w="9"/><text x="98.3232%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (26 samples, 0.04%)</title><rect x="98.1348%" y="373" width="0.0422%" height="15" fill="rgb(213,199,7)" fg:x="60506" fg:w="26"/><text x="98.3848%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="98.1348%" y="389" width="0.0438%" height="15" fill="rgb(250,110,10)" fg:x="60506" fg:w="27"/><text x="98.3848%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (11 samples, 0.02%)</title><rect x="98.1786%" y="389" width="0.0178%" height="15" fill="rgb(248,123,6)" fg:x="60533" fg:w="11"/><text x="98.4286%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (11 samples, 0.02%)</title><rect x="98.1786%" y="373" width="0.0178%" height="15" fill="rgb(206,91,31)" fg:x="60533" fg:w="11"/><text x="98.4286%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (11 samples, 0.02%)</title><rect x="98.2159%" y="389" width="0.0178%" height="15" fill="rgb(211,154,13)" fg:x="60556" fg:w="11"/><text x="98.4659%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (9 samples, 0.01%)</title><rect x="98.2192%" y="373" width="0.0146%" height="15" fill="rgb(225,148,7)" fg:x="60558" fg:w="9"/><text x="98.4692%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (19 samples, 0.03%)</title><rect x="98.2402%" y="389" width="0.0308%" height="15" fill="rgb(220,160,43)" fg:x="60571" fg:w="19"/><text x="98.4902%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (14 samples, 0.02%)</title><rect x="98.2711%" y="389" width="0.0227%" height="15" fill="rgb(213,52,39)" fg:x="60590" fg:w="14"/><text x="98.5211%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.02%)</title><rect x="98.2711%" y="373" width="0.0227%" height="15" fill="rgb(243,137,7)" fg:x="60590" fg:w="14"/><text x="98.5211%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="98.2711%" y="357" width="0.0227%" height="15" fill="rgb(230,79,13)" fg:x="60590" fg:w="14"/><text x="98.5211%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (146 samples, 0.24%)</title><rect x="98.0716%" y="421" width="0.2368%" height="15" fill="rgb(247,105,23)" fg:x="60467" fg:w="146"/><text x="98.3216%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (136 samples, 0.22%)</title><rect x="98.0878%" y="405" width="0.2206%" height="15" fill="rgb(223,179,41)" fg:x="60477" fg:w="136"/><text x="98.3378%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.01%)</title><rect x="98.2938%" y="389" width="0.0146%" height="15" fill="rgb(218,9,34)" fg:x="60604" fg:w="9"/><text x="98.5438%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (9 samples, 0.01%)</title><rect x="98.2938%" y="373" width="0.0146%" height="15" fill="rgb(222,106,8)" fg:x="60604" fg:w="9"/><text x="98.5438%" y="383.50"></text></g><g><title>diskann::greedy_search_nosearchlist (1,727 samples, 2.80%)</title><rect x="95.5446%" y="485" width="2.8010%" height="15" fill="rgb(211,220,0)" fg:x="58909" fg:w="1727"/><text x="95.7946%" y="495.50">di..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (181 samples, 0.29%)</title><rect x="98.0521%" y="469" width="0.2936%" height="15" fill="rgb(229,52,16)" fg:x="60455" fg:w="181"/><text x="98.3021%" y="479.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (181 samples, 0.29%)</title><rect x="98.0521%" y="453" width="0.2936%" height="15" fill="rgb(212,155,18)" fg:x="60455" fg:w="181"/><text x="98.3021%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (179 samples, 0.29%)</title><rect x="98.0553%" y="437" width="0.2903%" height="15" fill="rgb(242,21,14)" fg:x="60457" fg:w="179"/><text x="98.3053%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (23 samples, 0.04%)</title><rect x="98.3084%" y="421" width="0.0373%" height="15" fill="rgb(222,19,48)" fg:x="60613" fg:w="23"/><text x="98.5584%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (18 samples, 0.03%)</title><rect x="98.3165%" y="405" width="0.0292%" height="15" fill="rgb(232,45,27)" fg:x="60618" fg:w="18"/><text x="98.5665%" y="415.50"></text></g><g><title>__lruvec_stat_mod_folio (16 samples, 0.03%)</title><rect x="99.1242%" y="133" width="0.0260%" height="15" fill="rgb(249,103,42)" fg:x="61116" fg:w="16"/><text x="99.3742%" y="143.50"></text></g><g><title>__pte_offset_map_lock (11 samples, 0.02%)</title><rect x="99.1534%" y="133" width="0.0178%" height="15" fill="rgb(246,81,33)" fg:x="61134" fg:w="11"/><text x="99.4034%" y="143.50"></text></g><g><title>folio_add_lru_vma (44 samples, 0.07%)</title><rect x="99.1761%" y="133" width="0.0714%" height="15" fill="rgb(252,33,42)" fg:x="61148" fg:w="44"/><text x="99.4261%" y="143.50"></text></g><g><title>lru_add_fn (30 samples, 0.05%)</title><rect x="99.1988%" y="117" width="0.0487%" height="15" fill="rgb(209,212,41)" fg:x="61162" fg:w="30"/><text x="99.4488%" y="127.50"></text></g><g><title>__folio_throttle_swaprate (17 samples, 0.03%)</title><rect x="99.2555%" y="117" width="0.0276%" height="15" fill="rgb(207,154,6)" fg:x="61197" fg:w="17"/><text x="99.5055%" y="127.50"></text></g><g><title>blk_cgroup_congested (16 samples, 0.03%)</title><rect x="99.2572%" y="101" width="0.0260%" height="15" fill="rgb(223,64,47)" fg:x="61198" fg:w="16"/><text x="99.5072%" y="111.50"></text></g><g><title>get_mem_cgroup_from_mm (16 samples, 0.03%)</title><rect x="99.2929%" y="101" width="0.0260%" height="15" fill="rgb(211,161,38)" fg:x="61220" fg:w="16"/><text x="99.5429%" y="111.50"></text></g><g><title>__count_memcg_events (13 samples, 0.02%)</title><rect x="99.3285%" y="85" width="0.0211%" height="15" fill="rgb(219,138,40)" fg:x="61242" fg:w="13"/><text x="99.5785%" y="95.50"></text></g><g><title>mem_cgroup_commit_charge (22 samples, 0.04%)</title><rect x="99.3188%" y="101" width="0.0357%" height="15" fill="rgb(241,228,46)" fg:x="61236" fg:w="22"/><text x="99.5688%" y="111.50"></text></g><g><title>__mem_cgroup_charge (78 samples, 0.13%)</title><rect x="99.2831%" y="117" width="0.1265%" height="15" fill="rgb(223,209,38)" fg:x="61214" fg:w="78"/><text x="99.5331%" y="127.50"></text></g><g><title>try_charge_memcg (34 samples, 0.06%)</title><rect x="99.3545%" y="101" width="0.0551%" height="15" fill="rgb(236,164,45)" fg:x="61258" fg:w="34"/><text x="99.6045%" y="111.50"></text></g><g><title>post_alloc_hook (24 samples, 0.04%)</title><rect x="99.4859%" y="53" width="0.0389%" height="15" fill="rgb(231,15,5)" fg:x="61339" fg:w="24"/><text x="99.7359%" y="63.50"></text></g><g><title>clear_page_erms (23 samples, 0.04%)</title><rect x="99.4875%" y="37" width="0.0373%" height="15" fill="rgb(252,35,15)" fg:x="61340" fg:w="23"/><text x="99.7375%" y="47.50"></text></g><g><title>get_page_from_freelist (96 samples, 0.16%)</title><rect x="99.4242%" y="69" width="0.1557%" height="15" fill="rgb(248,181,18)" fg:x="61301" fg:w="96"/><text x="99.6742%" y="79.50"></text></g><g><title>rmqueue_bulk (34 samples, 0.06%)</title><rect x="99.5248%" y="53" width="0.0551%" height="15" fill="rgb(233,39,42)" fg:x="61363" fg:w="34"/><text x="99.7748%" y="63.50"></text></g><g><title>folio_prealloc (205 samples, 0.33%)</title><rect x="99.2555%" y="133" width="0.3325%" height="15" fill="rgb(238,110,33)" fg:x="61197" fg:w="205"/><text x="99.5055%" y="143.50"></text></g><g><title>vma_alloc_folio_noprof (110 samples, 0.18%)</title><rect x="99.4096%" y="117" width="0.1784%" height="15" fill="rgb(233,195,10)" fg:x="61292" fg:w="110"/><text x="99.6596%" y="127.50"></text></g><g><title>alloc_pages_mpol_noprof (107 samples, 0.17%)</title><rect x="99.4145%" y="101" width="0.1735%" height="15" fill="rgb(254,105,3)" fg:x="61295" fg:w="107"/><text x="99.6645%" y="111.50"></text></g><g><title>__alloc_pages_noprof (103 samples, 0.17%)</title><rect x="99.4210%" y="85" width="0.1671%" height="15" fill="rgb(221,225,9)" fg:x="61299" fg:w="103"/><text x="99.6710%" y="95.50"></text></g><g><title>do_anonymous_page (300 samples, 0.49%)</title><rect x="99.1080%" y="149" width="0.4866%" height="15" fill="rgb(224,227,45)" fg:x="61106" fg:w="300"/><text x="99.3580%" y="159.50"></text></g><g><title>do_huge_pmd_anonymous_page (13 samples, 0.02%)</title><rect x="99.5945%" y="149" width="0.0211%" height="15" fill="rgb(229,198,43)" fg:x="61406" fg:w="13"/><text x="99.8445%" y="159.50"></text></g><g><title>vma_alloc_folio_noprof (8 samples, 0.01%)</title><rect x="99.6026%" y="133" width="0.0130%" height="15" fill="rgb(206,209,35)" fg:x="61411" fg:w="8"/><text x="99.8526%" y="143.50"></text></g><g><title>alloc_pages_mpol_noprof (8 samples, 0.01%)</title><rect x="99.6026%" y="117" width="0.0130%" height="15" fill="rgb(245,195,53)" fg:x="61411" fg:w="8"/><text x="99.8526%" y="127.50"></text></g><g><title>__alloc_pages_noprof (7 samples, 0.01%)</title><rect x="99.6043%" y="101" width="0.0114%" height="15" fill="rgb(240,92,26)" fg:x="61412" fg:w="7"/><text x="99.8543%" y="111.50"></text></g><g><title>handle_mm_fault (351 samples, 0.57%)</title><rect x="99.0593%" y="165" width="0.5693%" height="15" fill="rgb(207,40,23)" fg:x="61076" fg:w="351"/><text x="99.3093%" y="175.50"></text></g><g><title>lock_mm_and_find_vma (27 samples, 0.04%)</title><rect x="99.6286%" y="165" width="0.0438%" height="15" fill="rgb(223,111,35)" fg:x="61427" fg:w="27"/><text x="99.8786%" y="175.50"></text></g><g><title>find_vma (20 samples, 0.03%)</title><rect x="99.6399%" y="149" width="0.0324%" height="15" fill="rgb(229,147,28)" fg:x="61434" fg:w="20"/><text x="99.8899%" y="159.50"></text></g><g><title>mt_find (14 samples, 0.02%)</title><rect x="99.6497%" y="133" width="0.0227%" height="15" fill="rgb(211,29,28)" fg:x="61440" fg:w="14"/><text x="99.8997%" y="143.50"></text></g><g><title>asm_exc_page_fault (727 samples, 1.18%)</title><rect x="98.4997%" y="213" width="1.1791%" height="15" fill="rgb(228,72,33)" fg:x="60731" fg:w="727"/><text x="98.7497%" y="223.50"></text></g><g><title>exc_page_fault (402 samples, 0.65%)</title><rect x="99.0269%" y="197" width="0.6520%" height="15" fill="rgb(205,214,31)" fg:x="61056" fg:w="402"/><text x="99.2769%" y="207.50"></text></g><g><title>do_user_addr_fault (398 samples, 0.65%)</title><rect x="99.0333%" y="181" width="0.6455%" height="15" fill="rgb(224,111,15)" fg:x="61060" fg:w="398"/><text x="99.2833%" y="191.50"></text></g><g><title>copy_page_to_iter (824 samples, 1.34%)</title><rect x="98.3521%" y="245" width="1.3364%" height="15" fill="rgb(253,21,26)" fg:x="60640" fg:w="824"/><text x="98.6021%" y="255.50"></text></g><g><title>_copy_to_iter (822 samples, 1.33%)</title><rect x="98.3554%" y="229" width="1.3332%" height="15" fill="rgb(245,139,43)" fg:x="60642" fg:w="822"/><text x="98.6054%" y="239.50"></text></g><g><title>filemap_get_read_batch (14 samples, 0.02%)</title><rect x="99.6902%" y="229" width="0.0227%" height="15" fill="rgb(252,170,7)" fg:x="61465" fg:w="14"/><text x="99.9402%" y="239.50"></text></g><g><title>page_cache_ra_order (7 samples, 0.01%)</title><rect x="99.7194%" y="229" width="0.0114%" height="15" fill="rgb(231,118,14)" fg:x="61483" fg:w="7"/><text x="99.9694%" y="239.50"></text></g><g><title>filemap_get_pages (28 samples, 0.05%)</title><rect x="99.6886%" y="245" width="0.0454%" height="15" fill="rgb(238,83,0)" fg:x="61464" fg:w="28"/><text x="99.9386%" y="255.50"></text></g><g><title>entry_SYSCALL_64 (857 samples, 1.39%)</title><rect x="98.3473%" y="357" width="1.3900%" height="15" fill="rgb(221,39,39)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="367.50"></text></g><g><title>do_syscall_64 (857 samples, 1.39%)</title><rect x="98.3473%" y="341" width="1.3900%" height="15" fill="rgb(222,119,46)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="351.50"></text></g><g><title>__x64_sys_read (857 samples, 1.39%)</title><rect x="98.3473%" y="325" width="1.3900%" height="15" fill="rgb(222,165,49)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="335.50"></text></g><g><title>vfs_read (857 samples, 1.39%)</title><rect x="98.3473%" y="309" width="1.3900%" height="15" fill="rgb(219,113,52)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="319.50"></text></g><g><title>[[xfs]] (857 samples, 1.39%)</title><rect x="98.3473%" y="293" width="1.3900%" height="15" fill="rgb(214,7,15)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="303.50"></text></g><g><title>[[xfs]] (857 samples, 1.39%)</title><rect x="98.3473%" y="277" width="1.3900%" height="15" fill="rgb(235,32,4)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="287.50"></text></g><g><title>filemap_read (857 samples, 1.39%)</title><rect x="98.3473%" y="261" width="1.3900%" height="15" fill="rgb(238,90,54)" fg:x="60637" fg:w="857"/><text x="98.5973%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (859 samples, 1.39%)</title><rect x="98.3457%" y="469" width="1.3932%" height="15" fill="rgb(213,208,19)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="479.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (859 samples, 1.39%)</title><rect x="98.3457%" y="453" width="1.3932%" height="15" fill="rgb(233,156,4)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="463.50"></text></g><g><title>std::io::default_read_to_end (859 samples, 1.39%)</title><rect x="98.3457%" y="437" width="1.3932%" height="15" fill="rgb(207,194,5)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="447.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (859 samples, 1.39%)</title><rect x="98.3457%" y="421" width="1.3932%" height="15" fill="rgb(206,111,30)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="431.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (859 samples, 1.39%)</title><rect x="98.3457%" y="405" width="1.3932%" height="15" fill="rgb(243,70,54)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="415.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (859 samples, 1.39%)</title><rect x="98.3457%" y="389" width="1.3932%" height="15" fill="rgb(242,28,8)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="399.50"></text></g><g><title>read (859 samples, 1.39%)</title><rect x="98.3457%" y="373" width="1.3932%" height="15" fill="rgb(219,106,18)" fg:x="60636" fg:w="859"/><text x="98.5957%" y="383.50"></text></g><g><title>_compound_head (20 samples, 0.03%)</title><rect x="99.7600%" y="213" width="0.0324%" height="15" fill="rgb(244,222,10)" fg:x="61508" fg:w="20"/><text x="100.0100%" y="223.50"></text></g><g><title>folio_remove_rmap_ptes (9 samples, 0.01%)</title><rect x="99.7924%" y="213" width="0.0146%" height="15" fill="rgb(236,179,52)" fg:x="61528" fg:w="9"/><text x="100.0424%" y="223.50"></text></g><g><title>__page_cache_release (16 samples, 0.03%)</title><rect x="99.8265%" y="165" width="0.0260%" height="15" fill="rgb(213,23,39)" fg:x="61549" fg:w="16"/><text x="100.0765%" y="175.50"></text></g><g><title>free_unref_page_commit (24 samples, 0.04%)</title><rect x="99.8638%" y="149" width="0.0389%" height="15" fill="rgb(238,48,10)" fg:x="61572" fg:w="24"/><text x="100.1138%" y="159.50"></text></g><g><title>free_pcppages_bulk (22 samples, 0.04%)</title><rect x="99.8670%" y="133" width="0.0357%" height="15" fill="rgb(251,196,23)" fg:x="61574" fg:w="22"/><text x="100.1170%" y="143.50"></text></g><g><title>tlb_flush_mmu (63 samples, 0.10%)</title><rect x="99.8070%" y="213" width="0.1022%" height="15" fill="rgb(250,152,24)" fg:x="61537" fg:w="63"/><text x="100.0570%" y="223.50"></text></g><g><title>free_pages_and_swap_cache (63 samples, 0.10%)</title><rect x="99.8070%" y="197" width="0.1022%" height="15" fill="rgb(209,150,17)" fg:x="61537" fg:w="63"/><text x="100.0570%" y="207.50"></text></g><g><title>folios_put_refs (57 samples, 0.09%)</title><rect x="99.8167%" y="181" width="0.0924%" height="15" fill="rgb(234,202,34)" fg:x="61543" fg:w="57"/><text x="100.0667%" y="191.50"></text></g><g><title>free_unref_folios (34 samples, 0.06%)</title><rect x="99.8540%" y="165" width="0.0551%" height="15" fill="rgb(253,148,53)" fg:x="61566" fg:w="34"/><text x="100.1040%" y="175.50"></text></g><g><title>diskann::load_file (966 samples, 1.57%)</title><rect x="98.3457%" y="485" width="1.5668%" height="15" fill="rgb(218,129,16)" fg:x="60636" fg:w="966"/><text x="98.5957%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (102 samples, 0.17%)</title><rect x="99.7470%" y="469" width="0.1654%" height="15" fill="rgb(216,85,19)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (102 samples, 0.17%)</title><rect x="99.7470%" y="453" width="0.1654%" height="15" fill="rgb(235,228,7)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.17%)</title><rect x="99.7470%" y="437" width="0.1654%" height="15" fill="rgb(245,175,0)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (102 samples, 0.17%)</title><rect x="99.7470%" y="421" width="0.1654%" height="15" fill="rgb(208,168,36)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (102 samples, 0.17%)</title><rect x="99.7470%" y="405" width="0.1654%" height="15" fill="rgb(246,171,24)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="415.50"></text></g><g><title>cfree (102 samples, 0.17%)</title><rect x="99.7470%" y="389" width="0.1654%" height="15" fill="rgb(215,142,24)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="399.50"></text></g><g><title>__munmap (102 samples, 0.17%)</title><rect x="99.7470%" y="373" width="0.1654%" height="15" fill="rgb(250,187,7)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="383.50"></text></g><g><title>entry_SYSCALL_64 (102 samples, 0.17%)</title><rect x="99.7470%" y="357" width="0.1654%" height="15" fill="rgb(228,66,33)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="367.50"></text></g><g><title>do_syscall_64 (102 samples, 0.17%)</title><rect x="99.7470%" y="341" width="0.1654%" height="15" fill="rgb(234,215,21)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="351.50"></text></g><g><title>__x64_sys_munmap (102 samples, 0.17%)</title><rect x="99.7470%" y="325" width="0.1654%" height="15" fill="rgb(222,191,20)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="335.50"></text></g><g><title>__vm_munmap (102 samples, 0.17%)</title><rect x="99.7470%" y="309" width="0.1654%" height="15" fill="rgb(245,79,54)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="319.50"></text></g><g><title>do_vmi_munmap (102 samples, 0.17%)</title><rect x="99.7470%" y="293" width="0.1654%" height="15" fill="rgb(240,10,37)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="303.50"></text></g><g><title>do_vmi_align_munmap (102 samples, 0.17%)</title><rect x="99.7470%" y="277" width="0.1654%" height="15" fill="rgb(214,192,32)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="287.50"></text></g><g><title>unmap_vmas (102 samples, 0.17%)</title><rect x="99.7470%" y="261" width="0.1654%" height="15" fill="rgb(209,36,54)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="271.50"></text></g><g><title>unmap_page_range (102 samples, 0.17%)</title><rect x="99.7470%" y="245" width="0.1654%" height="15" fill="rgb(220,10,11)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="255.50"></text></g><g><title>zap_pte_range (102 samples, 0.17%)</title><rect x="99.7470%" y="229" width="0.1654%" height="15" fill="rgb(221,106,17)" fg:x="61500" fg:w="102"/><text x="99.9970%" y="239.50"></text></g><g><title>_start (61,183 samples, 99.23%)</title><rect x="0.6909%" y="757" width="99.2328%" height="15" fill="rgb(251,142,44)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="767.50">_start</text></g><g><title>__libc_start_main (61,183 samples, 99.23%)</title><rect x="0.6909%" y="741" width="99.2328%" height="15" fill="rgb(238,13,15)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="751.50">__libc_start_main</text></g><g><title>[libc.so.6] (61,183 samples, 99.23%)</title><rect x="0.6909%" y="725" width="99.2328%" height="15" fill="rgb(208,107,27)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="735.50">[libc.so.6]</text></g><g><title>main (61,183 samples, 99.23%)</title><rect x="0.6909%" y="709" width="99.2328%" height="15" fill="rgb(205,136,37)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal (61,183 samples, 99.23%)</title><rect x="0.6909%" y="693" width="99.2328%" height="15" fill="rgb(250,205,27)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="703.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (61,183 samples, 99.23%)</title><rect x="0.6909%" y="677" width="99.2328%" height="15" fill="rgb(210,80,43)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (61,183 samples, 99.23%)</title><rect x="0.6909%" y="661" width="99.2328%" height="15" fill="rgb(247,160,36)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (61,183 samples, 99.23%)</title><rect x="0.6909%" y="645" width="99.2328%" height="15" fill="rgb(234,13,49)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="655.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (61,183 samples, 99.23%)</title><rect x="0.6909%" y="629" width="99.2328%" height="15" fill="rgb(234,122,0)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="639.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (61,183 samples, 99.23%)</title><rect x="0.6909%" y="613" width="99.2328%" height="15" fill="rgb(207,146,38)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (61,183 samples, 99.23%)</title><rect x="0.6909%" y="597" width="99.2328%" height="15" fill="rgb(207,177,25)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (61,183 samples, 99.23%)</title><rect x="0.6909%" y="581" width="99.2328%" height="15" fill="rgb(211,178,42)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (61,183 samples, 99.23%)</title><rect x="0.6909%" y="565" width="99.2328%" height="15" fill="rgb(230,69,54)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (61,183 samples, 99.23%)</title><rect x="0.6909%" y="549" width="99.2328%" height="15" fill="rgb(214,135,41)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="559.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (61,183 samples, 99.23%)</title><rect x="0.6909%" y="533" width="99.2328%" height="15" fill="rgb(237,67,25)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="543.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (61,183 samples, 99.23%)</title><rect x="0.6909%" y="517" width="99.2328%" height="15" fill="rgb(222,189,50)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>diskann::main (61,183 samples, 99.23%)</title><rect x="0.6909%" y="501" width="99.2328%" height="15" fill="rgb(245,148,34)" fg:x="426" fg:w="61183"/><text x="0.9409%" y="511.50">diskann::main</text></g><g><title>diskann::medioid (7 samples, 0.01%)</title><rect x="99.9124%" y="485" width="0.0114%" height="15" fill="rgb(222,29,6)" fg:x="61602" fg:w="7"/><text x="100.1624%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (36 samples, 0.06%)</title><rect x="99.9319%" y="757" width="0.0584%" height="15" fill="rgb(221,189,43)" fg:x="61614" fg:w="36"/><text x="100.1819%" y="767.50"></text></g><g><title>diskann (61,652 samples, 99.99%)</title><rect x="0.0000%" y="773" width="99.9935%" height="15" fill="rgb(207,36,27)" fg:x="0" fg:w="61652"/><text x="0.2500%" y="783.50">diskann</text></g><g><title>all (61,656 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(217,90,24)" fg:x="0" fg:w="61656"/><text x="0.2500%" y="799.50"></text></g></svg></svg>